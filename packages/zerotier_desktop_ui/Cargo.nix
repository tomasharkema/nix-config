# This file was @generated by crate2nix 0.11.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.
{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs {config = {};},
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? ["default"],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {},
}: rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "zerotier_desktop_ui";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate {inherit packageId;};
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "zerotier_desktop_ui" = rec {
      packageId = "zerotier_desktop_ui";
      build = internal.buildRustCrateWithFeatures {
        packageId = "zerotier_desktop_ui";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate {inherit packageId;};
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths = let
      members = builtins.attrValues workspaceMembers;
    in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.17.0";
        edition = "2015";
        sha256 = "0sw16zqy6w0ar633z69m7lw6gb0k1y7xj3387a8wly43ij5div5r";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = ["read"];
          }
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "object" = ["dep:object"];
          "rustc-demangle" = ["dep:rustc-demangle"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std"];
          "smallvec" = ["dep:smallvec"];
          "std" = ["gimli/std"];
          "std-object" = ["std" "object" "object/std" "object/compression" "gimli/endian-reader"];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.45";
        edition = "2018";
        sha256 = "1izmq8kmjgx8sjlrv78r32z57r8r2zd2lkhxb6iw0lx8whxf847f";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.6";
        edition = "2015";
        sha256 = "0i6m1l3f73i0lf0cjdf5rh3xpvxydyhfbakq7xx7bkrp5qajgid4";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.5.2";
        edition = "2018";
        sha256 = "12q6hn01x5435bprwlb7w9m7817dyfq55yrl4psygr78bp32zdi3";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
      };
      "async-io" = rec {
        crateName = "async-io";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0yv0xv7nhkdhyz9z5q1hq9bavlmkrysrd1q30h69yhzjg6jfc4d8";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = ["all"];
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["winsock2"];
          }
        ];
      };
      "atk" = rec {
        crateName = "atk";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1fi6f3k1lgd0iymar58hp88k76fm5pd1npi2avdn9r3mmb922fx8";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
            rename = "ffi";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = ["ffi/dox"];
          "v2_30" = ["ffi/v2_30"];
          "v2_32" = ["v2_30" "ffi/v2_32"];
          "v2_34" = ["v2_32" "ffi/v2_34"];
        };
      };
      "atk-sys" = rec {
        crateName = "atk-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1sl3pqfb2jaf9kcfxj9k43d7iv8gcl5zgdgn3j5vp13w2mqgdp5s";
        libName = "atk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_32" = ["v2_30"];
          "v2_34" = ["v2_32"];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0jj6i9zn4gjl03kjvziqdji6rwx8ykz8zk2ngpc331z2g3fk3c6d";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.63";
        edition = "2018";
        sha256 = "1dp1dik2riphgslibafp3kzj95f8kgx42wkh4qghc4v5pbc2j5ij";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            features = ["read_core" "elf" "macho" "pe" "unaligned" "archive"];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["std"];
          "rustc-serialize" = ["dep:rustc-serialize"];
          "serde" = ["dep:serde"];
          "serialize-rustc" = ["rustc-serialize"];
          "serialize-serde" = ["serde"];
          "verify-winapi" = ["winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt"];
          "winapi" = ["dep:winapi"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.13.0";
        edition = "2018";
        sha256 = "1z82g23mbzjgijkpcrilc7nljpxpvpf7zxf6iyiapkgka2ngwkch";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "0.5.11";
        edition = "2018";
        sha256 = "11y5nm06lpypz65dbxgncs12ckx24i5i4a777ckfhfxd93ili9xg";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];
      };
      "boxfnonce" = rec {
        crateName = "boxfnonce";
        version = "0.1.1";
        edition = "2015";
        sha256 = "09ilf4zyx92hyhkxlsxksfyprzr9iwq5gqqb22aaqr32c8fwp22r";
        authors = [
          "Stefan Bühler <stbuehler@web.de>"
        ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.8.0";
        edition = "2018";
        sha256 = "0v5vck40wmz95d48gq0z3al32vy1yic8fihjkb0sfh4h7862c7lg";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.4.3";
        edition = "2018";
        sha256 = "0456lv9xi1a5bcm32arknf33ikv76p3fr9yzki4lb2897p2qkh8l";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1y70b249m02lfp0j6565b29kviapj4xsl9whamcqwddnp9kjv1y4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "cache-padded" = rec {
        crateName = "cache-padded";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1fkdwv9vjazm6fs3s5v56mm4carwswdmw8fcwm9ygrcvihcya6k3";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
      };
      "cairo-rs" = rec {
        crateName = "cairo-rs";
        version = "0.14.9";
        edition = "2018";
        sha256 = "10ml7hxzj6w5k6yjdkcmxx0ds4mnrn9j3bdbk1nmh36vg5cp5d9k";
        libName = "cairo";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            rename = "ffi";
          }
          {
            name = "glib";
            packageId = "glib";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = ["use_glib"];
          "dox" = ["ffi/dox" "glib/dox" "freetype"];
          "freetype" = ["ffi/freetype" "freetype-crate"];
          "freetype-crate" = ["dep:freetype-crate"];
          "glib" = ["dep:glib"];
          "pdf" = ["ffi/pdf"];
          "png" = ["ffi/png"];
          "ps" = ["ffi/ps"];
          "script" = ["ffi/script"];
          "svg" = ["ffi/svg"];
          "use_glib" = ["glib" "ffi/use_glib"];
          "v1_16" = ["ffi/v1_16"];
          "win32-surface" = ["ffi/win32-surface"];
          "xcb" = ["ffi/xcb"];
          "xlib" = ["ffi/xlib"];
        };
        resolvedDefaultFeatures = ["default" "glib" "use_glib"];
      };
      "cairo-sys-rs" = rec {
        crateName = "cairo-sys-rs";
        version = "0.14.9";
        edition = "2018";
        sha256 = "0w3md4xk87ign30wb3rqfmmj0q6pvg5arbm35flgsd08jxvbhj5l";
        libName = "cairo_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "dox" = ["x11/dox"];
          "glib-sys" = ["dep:glib-sys"];
          "use_glib" = ["glib-sys"];
          "win32-surface" = ["winapi"];
          "winapi" = ["dep:winapi"];
          "x11" = ["dep:x11"];
          "xlib" = ["x11"];
        };
        resolvedDefaultFeatures = ["glib-sys" "use_glib"];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.72";
        edition = "2018";
        crateBin = [];
        sha256 = "1vl50h2qh0nh0iddzj6gd1pnxnxpvwmbfxc30578c1pajmxi7a92";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "jobserver" = ["dep:jobserver"];
          "parallel" = ["jobserver"];
        };
      };
      "cfg-expr 0.8.1" = rec {
        crateName = "cfg-expr";
        version = "0.8.1";
        edition = "2018";
        sha256 = "03lgv8psc2qrr93hxgdfmfwbj1crpzghxd7qh6w2nz0l4qryh4ml";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Jake Shadle <jake.shadle@embark-studios.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "target-lexicon" = ["dep:target-lexicon"];
          "targets" = ["target-lexicon"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "cfg-expr 0.9.0" = rec {
        crateName = "cfg-expr";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0wbmpnf6mwda8iz4370sxilq9gxiv621gdv4glpy7z6i4nb0pbpd";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Jake Shadle <jake.shadle@embark-studios.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "target-lexicon" = ["dep:target-lexicon"];
          "targets" = ["target-lexicon"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "cfg-if 0.1.10" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "cfg-if 1.0.0" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.19";
        edition = "2015";
        sha256 = "0wyfl6c00vhfl562spnfcna3zkw8jqvcp652m9iskhl8j26dc2k7";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["std" "minwinbase" "minwindef" "timezoneapi"];
          }
        ];
        features = {
          "clock" = ["libc" "std" "winapi"];
          "default" = ["clock" "std" "oldtime"];
          "js-sys" = ["dep:js-sys"];
          "libc" = ["dep:libc"];
          "oldtime" = ["time"];
          "pure-rust-locales" = ["dep:pure-rust-locales"];
          "rustc-serialize" = ["dep:rustc-serialize"];
          "serde" = ["dep:serde"];
          "time" = ["dep:time"];
          "unstable-locales" = ["pure-rust-locales" "alloc"];
          "wasm-bindgen" = ["dep:wasm-bindgen"];
          "wasmbind" = ["wasm-bindgen" "js-sys"];
          "winapi" = ["dep:winapi"];
        };
        resolvedDefaultFeatures = ["clock" "default" "libc" "oldtime" "std" "time" "winapi"];
      };
      "chunked_transfer" = rec {
        crateName = "chunked_transfer";
        version = "1.4.0";
        edition = "2018";
        sha256 = "0bkdlsrszfcscw3j6yhs7kj6jbp8id47jjk6h9k58px47na5gy7z";
        authors = [
          "Corey Farwell <coreyf@rwell.org>"
        ];
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.24.0";
        edition = "2015";
        sha256 = "0cp8hsajmi7gini22bmlsf9dac7cap7x1k169vxhwlr3j8p90qvg";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "cocoa-foundation";
            packageId = "cocoa-foundation";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.2";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics 0.22.3";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
      };
      "cocoa-foundation" = rec {
        crateName = "cocoa-foundation";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0633ipbd28z35rsdmsl505f1aasrjsrrnirs826aa32nbnv4kpks";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.2";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
      };
      "com" = rec {
        crateName = "com";
        version = "0.2.0";
        edition = "2018";
        sha256 = "14y703q013gbaqiipgimz19rvmf034yxlgncqmnrinhkl2ra4c2s";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros";
            packageId = "com_macros";
          }
        ];
      };
      "com_macros" = rec {
        crateName = "com_macros";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hghsfldbra8l7ivysldpahb5g0fhsw5704yr3f8v9py89cb01kn";
        procMacro = true;
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros_support";
            packageId = "com_macros_support";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
      };
      "com_macros_support" = rec {
        crateName = "com_macros_support";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1nh7w4920k5vbz2qhz59ymm5rrhnjiz5sics60787j2a1z9adscp";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "1.2.2";
        edition = "2018";
        sha256 = "18w6hblcjjk9d0my3657ra1zdj79gwfjmzvc0b3985g01dahgv9h";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "cache-padded";
            packageId = "cache-padded";
          }
        ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1g3vp04qzmk6cpzrd19yci6a95m7ap6wy7wkwgiy2pjklklrfl14";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
      };
      "core-foundation 0.7.0" = rec {
        crateName = "core-foundation";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0wbias8f0m5kyn2pcksi0h58fdslams6nmf16w78fgn42dx4rljp";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys 0.7.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "mac_os_10_7_support" = ["core-foundation-sys/mac_os_10_7_support"];
          "mac_os_10_8_features" = ["core-foundation-sys/mac_os_10_8_features"];
          "uuid" = ["dep:uuid"];
          "with-chrono" = ["chrono"];
          "with-uuid" = ["uuid"];
        };
      };
      "core-foundation 0.9.2" = rec {
        crateName = "core-foundation";
        version = "0.9.2";
        edition = "2015";
        sha256 = "1cs7dya58xf4px4b1953040fpz5lm3qhf7fzv0jf94xva42y3238";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys 0.8.3";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "mac_os_10_7_support" = ["core-foundation-sys/mac_os_10_7_support"];
          "mac_os_10_8_features" = ["core-foundation-sys/mac_os_10_8_features"];
          "uuid" = ["dep:uuid"];
          "with-chrono" = ["chrono"];
          "with-uuid" = ["uuid"];
        };
      };
      "core-foundation-sys 0.7.0" = rec {
        crateName = "core-foundation-sys";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1b5qfnnmg49sawwfsb0c0wbj81bqi7h7lh68pmhbidf0jjs1m9xk";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "core-foundation-sys 0.8.3" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.3";
        edition = "2015";
        sha256 = "1p5r2wckarkpkyc4z83q08dwpvcafrb1h6fxfa3qnikh8szww9sq";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "core-graphics 0.19.2" = rec {
        crateName = "core-graphics";
        version = "0.19.2";
        edition = "2015";
        sha256 = "08z9pgwfc0wb5v3ns7rnb2010q9g42b5vfwhp9fv4spawrs9725k";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.7.0";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "core-graphics 0.22.3" = rec {
        crateName = "core-graphics";
        version = "0.22.3";
        edition = "2015";
        sha256 = "1yz4xzbz36vbmlra0viazzlicp8kap1ldgshsp5nzz4g7fmvp095";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.2";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "core-graphics-types" = rec {
        crateName = "core-graphics-types";
        version = "0.1.1";
        edition = "2015";
        sha256 = "12vqf0n5mjjcqjksdd82n2zh8hfda2zpiiqsr522c2266j5vcs1s";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.2";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "core-video-sys" = rec {
        crateName = "core-video-sys";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0a1qbn50jrb5hxrfshyb7y0f3pbf4ily6i6nciv7bn8ac4isvv1l";
        authors = [
          "luozijun <luozijun.assistant@gmail.com>"
          "michael.laifx <cihv2@163.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys 0.7.0";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics 0.19.2";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        features = {
          "all" = ["display_link" "direct3d" "io_suface" "opengl"];
          "core-graphics" = ["dep:core-graphics"];
          "default" = ["display_link" "metal"];
          "display_link" = ["opengl" "core-graphics"];
          "metal" = ["dep:metal"];
        };
        resolvedDefaultFeatures = ["core-graphics" "display_link" "opengl"];
      };
      "crc64" = rec {
        crateName = "crc64";
        version = "1.0.0";
        edition = "2015";
        crateBin = [];
        sha256 = "0469vp0q9431pqx1236g60if5q3xyxpv4h14smkd45dfzsa6aqjm";
        authors = [
          "Jan-Erik Rediger <badboy@archlinux.us>"
        ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1d1dnp61g51gnmc45cb4vpjsr5n62wz22an2y3q6avgifzhjgv86";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "crossbeam-utils" = ["dep:crossbeam-utils"];
          "default" = ["std"];
          "std" = ["crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["crossbeam-utils" "default" "std"];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.5";
        edition = "2018";
        sha256 = "1ny481cx8a5pdknypb41jqym03dl8x26i2ldyyp3yb3zrq8zqb6q";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "lazy_static" = ["dep:lazy_static"];
          "loom" = ["dep:loom"];
          "std" = ["lazy_static"];
        };
        resolvedDefaultFeatures = ["default" "lazy_static" "std"];
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0n7qsp6854wm3y1q1lvylhv15zvc87ibbac1nyfmcdbyv1snww0d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = ["suggestions"];
          "diagnostics" = ["darling_core/diagnostics"];
          "suggestions" = ["darling_core/suggestions"];
        };
        resolvedDefaultFeatures = ["default" "suggestions"];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.10.2";
        edition = "2015";
        sha256 = "16sija1jv0l754x4aa6b6fy01d1kf8m0r4id3flqipm45np61jgh";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full" "extra-traits"];
          }
        ];
        features = {
          "strsim" = ["dep:strsim"];
          "suggestions" = ["strsim"];
        };
        resolvedDefaultFeatures = ["strsim" "suggestions"];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0wlv31cxkrjijz5gv13hvk55c9lmd781aj12c8n84sa9mksa5dfr";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["visit" "extra-traits"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["use_core"];
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "1.0.5";
        edition = "2015";
        sha256 = "009rrhzj9pxyncmm2vhlj70npg0cgggv2hjbbkiwdl9vccq8kmrz";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = {
              target,
              features,
            }: ("redox" == target."os");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["knownfolders" "objbase" "shlobj" "winbase" "winerror"];
          }
        ];
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0fwjr9b7582ic5689zxj8lf7zl94iklhlns3yivrnv8c9fxr635x";
        authors = [
          "Steven Sheldon"
        ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.6.1";
        edition = "2015";
        sha256 = "0mwl9vngqf5jvrhmhn9x60kr5hivxyjxbmby2pybncxfqhf4z3g7";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["use_std"];
          "serde" = ["dep:serde"];
        };
      };
      "enumflags2" = rec {
        crateName = "enumflags2";
        version = "0.6.4";
        edition = "2018";
        sha256 = "182xd6cxxmadx1axnz6x73d12pzgwkc712zq2lxd4z1k48lxij43";
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Jakub \"NieDżejkob\" Kądziołka <kuba@kadziolka.net>"
        ];
        dependencies = [
          {
            name = "enumflags2_derive";
            packageId = "enumflags2_derive";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "not_literal" = ["enumflags2_derive/not_literal"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde"];
      };
      "enumflags2_derive" = rec {
        crateName = "enumflags2_derive";
        version = "0.6.4";
        edition = "2018";
        sha256 = "1kkcwi4n76bi1c16ms00dyk4d393gdf29kpr4k9zsn5z7m7fjvll";
        procMacro = true;
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Jakub \"NieDżejkob\" Kądziołka <kuba@kadziolka.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.8";
        edition = "2015";
        sha256 = "11jg1wmbkijrs6bk9fqnbrm9zf0850whnqpgnxyswbn0dk8rnbnk";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "default" = ["std" "derive"];
          "derive" = ["failure_derive"];
          "failure_derive" = ["dep:failure_derive"];
          "std" = ["backtrace"];
        };
        resolvedDefaultFeatures = ["backtrace" "std"];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "1.5.0";
        edition = "2018";
        sha256 = "0birvh29m4x6nwjdyrmiyiypw9l52bmvk15ksdw96hjs50yyv55k";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch");
          }
        ];
        devDependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch");
            features = ["wasm-bindgen"];
          }
        ];
      };
      "field-offset" = rec {
        crateName = "field-offset";
        version = "0.3.4";
        edition = "2015";
        sha256 = "14pvxz7yr0r3mlhaf65zva3r9d0kqid01wdw7ngx7jsh2jam870y";
        authors = [
          "Diggory Blake <diggsey@googlemail.com>"
        ];
        dependencies = [
          {
            name = "memoffset";
            packageId = "memoffset";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.0.1";
        edition = "2018";
        sha256 = "1491fmakavcmsjbm3q6iy0bhmn9l422jasdhzx5hkljgza3mmhjz";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.17";
        edition = "2018";
        sha256 = "1jk6znbqrmb6xkgs4g0s7ivv1djq7dyaci9d7xfdb04hagms0am1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc"];
          "async-await" = ["futures-util/async-await" "futures-util/async-await-macro"];
          "bilock" = ["futures-util/bilock"];
          "compat" = ["std" "futures-util/compat"];
          "default" = ["std" "async-await" "executor"];
          "executor" = ["std" "futures-executor/std"];
          "futures-executor" = ["dep:futures-executor"];
          "io-compat" = ["compat" "futures-util/io-compat"];
          "read-initializer" = ["futures-io/read-initializer" "futures-util/read-initializer"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel"];
          "thread-pool" = ["executor" "futures-executor/thread-pool"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable"];
          "write-all-vectored" = ["futures-util/write-all-vectored"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "default" "executor" "futures-executor" "std"];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.17";
        edition = "2018";
        sha256 = "121q4y5c10vihzgcb6fvp0gwzyh4hg6c37riqz9nbhdk7f6bm9jx";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc"];
          "default" = ["std"];
          "futures-sink" = ["dep:futures-sink"];
          "sink" = ["futures-sink"];
          "std" = ["alloc" "futures-core/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "futures-sink" "sink" "std"];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.17";
        edition = "2018";
        sha256 = "0gd5hfxcy5fqc3wm55a4yhcbh921wvzv09nkbhwh6dpjaxlw5lc8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.17";
        edition = "2018";
        sha256 = "0p3lv18dr90c032yrr4k833npp23a0spykvq4lq7d7cn63h5n0j5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num_cpus" = ["dep:num_cpus"];
          "std" = ["futures-core/std" "futures-task/std" "futures-util/std"];
          "thread-pool" = ["std" "num_cpus"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.17";
        edition = "2018";
        sha256 = "0xrk0xsrmhxrndhby79j31mkzbwg21s09fkpqldhyf1yzshf4baj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "1.12.0";
        edition = "2018";
        sha256 = "0j5zzjcq1ib2kf1mm3apqf9g2ly1jjw1d1d4v9vjqi9rrnd4i53n";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "fastrand" = ["dep:fastrand"];
          "futures-io" = ["dep:futures-io"];
          "memchr" = ["dep:memchr"];
          "parking" = ["dep:parking"];
          "std" = ["alloc" "fastrand" "futures-io" "parking" "memchr" "waker-fn"];
          "waker-fn" = ["dep:waker-fn"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "fastrand" "futures-io" "memchr" "parking" "std" "waker-fn"];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.17";
        edition = "2018";
        sha256 = "1fvriw31ippggp8496dpbvkykr2fgk57amhwrz5lqjzabjws9r0q";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.17";
        edition = "2018";
        sha256 = "04dwqbcwxil6iyv7fif2xjncz849mm63sghbb60f8kq22cy1bsin";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.17";
        edition = "2018";
        sha256 = "169fi44d8sbfpkkyhncj0pgkp1amrllg5523lncf8wyvxps00g8x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.17";
        edition = "2018";
        sha256 = "10al5ci74s6rk2d2wqqya0d4fwc6sqv525hzbvj6wfha45jq8min";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc"];
          "async-await-macro" = ["async-await" "futures-macro" "proc-macro-hack" "proc-macro-nested"];
          "channel" = ["std" "futures-channel"];
          "compat" = ["std" "futures_01"];
          "default" = ["std" "async-await" "async-await-macro"];
          "futures-channel" = ["dep:futures-channel"];
          "futures-io" = ["dep:futures-io"];
          "futures-macro" = ["dep:futures-macro"];
          "futures-sink" = ["dep:futures-sink"];
          "futures_01" = ["dep:futures_01"];
          "io" = ["std" "futures-io" "memchr"];
          "io-compat" = ["io" "compat" "tokio-io"];
          "memchr" = ["dep:memchr"];
          "proc-macro-hack" = ["dep:proc-macro-hack"];
          "proc-macro-nested" = ["dep:proc-macro-nested"];
          "read-initializer" = ["io" "futures-io/read-initializer" "futures-io/unstable"];
          "sink" = ["futures-sink"];
          "slab" = ["dep:slab"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "slab"];
          "tokio-io" = ["dep:tokio-io"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable"];
          "write-all-vectored" = ["io"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "async-await-macro" "channel" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "proc-macro-hack" "proc-macro-nested" "sink" "slab" "std"];
      };
      "gdk" = rec {
        crateName = "gdk";
        version = "0.14.3";
        edition = "2018";
        sha256 = "0fwkm4glh7cici6yd96qlddyp4s2l029wa1sgh6xxn00zkf4kmxr";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            rename = "ffi";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
        ];
        features = {
          "dox" = ["ffi/dox" "glib/dox" "gio/dox" "gdk-pixbuf/dox" "cairo-rs/dox" "pango/dox"];
          "v3_20" = ["ffi/v3_20"];
          "v3_22" = ["v3_20" "ffi/v3_22"];
          "v3_24" = ["v3_22" "ffi/v3_24"];
        };
        resolvedDefaultFeatures = ["v3_20" "v3_22"];
      };
      "gdk-pixbuf" = rec {
        crateName = "gdk-pixbuf";
        version = "0.14.0";
        edition = "2018";
        sha256 = "03xi6pi0h9jwkxvja18k75x5pblsiym4p39cmf7ypnh1iz5r4hak";
        libName = "gdk_pixbuf";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
            rename = "ffi";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = ["glib/dox" "ffi/dox"];
          "v2_36" = ["ffi/v2_36"];
          "v2_36_8" = ["v2_36" "ffi/v2_36_8"];
          "v2_40" = ["v2_36_8" "ffi/v2_40"];
        };
        resolvedDefaultFeatures = ["v2_36" "v2_36_8"];
      };
      "gdk-pixbuf-sys" = rec {
        crateName = "gdk-pixbuf-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "14759y4z2najwv3hpvdqi2qqnz4lqrcdqqhpkkvciyq189qc15zh";
        libName = "gdk_pixbuf_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_36_8" = ["v2_36"];
          "v2_40" = ["v2_36_8"];
        };
        resolvedDefaultFeatures = ["v2_36" "v2_36_8"];
      };
      "gdk-sys" = rec {
        crateName = "gdk-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "07hz3gg039sy7iffy2w5srxzsnqf15i3ryxkqfd995k67lyin28f";
        libName = "gdk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v3_22" = ["v3_20"];
          "v3_24" = ["v3_22"];
        };
        resolvedDefaultFeatures = ["v3_20" "v3_22"];
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = {
              target,
              features,
            }: ("wasi" == target."os");
          }
        ];
        features = {
          "bindgen" = ["dep:bindgen"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "js-sys" = ["dep:js-sys"];
          "log" = ["dep:log"];
          "rustc-dep-of-std" = ["compiler_builtins" "core"];
          "stdweb" = ["dep:stdweb"];
          "test-in-browser" = ["wasm-bindgen"];
          "wasm-bindgen" = ["bindgen" "js-sys"];
        };
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.26.1";
        edition = "2018";
        sha256 = "1m0vi36ypv4gx9gzcw6y456yqnlypizhwlcqrmg6vkwd0lnkgk3q";
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["read" "write" "std" "fallible-iterator" "endian-reader"];
          "endian-reader" = ["read" "stable_deref_trait"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "indexmap" = ["dep:indexmap"];
          "read" = ["read-core"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins"];
          "stable_deref_trait" = ["dep:stable_deref_trait"];
          "std" = ["fallible-iterator/std" "stable_deref_trait/std"];
          "write" = ["indexmap"];
        };
        resolvedDefaultFeatures = ["read" "read-core"];
      };
      "gio" = rec {
        crateName = "gio";
        version = "0.14.8";
        edition = "2018";
        sha256 = "1c2w47mznpplr3mmhgs4m4nlkv8gs4c182cwi9brbl7bncr3c73i";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
            rename = "ffi";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "dox" = ["ffi/dox" "glib/dox"];
          "v2_50" = ["ffi/v2_50" "glib/v2_50"];
          "v2_52" = ["v2_50" "ffi/v2_52" "glib/v2_52"];
          "v2_54" = ["v2_52" "ffi/v2_54" "glib/v2_54"];
          "v2_56" = ["v2_54" "ffi/v2_56" "glib/v2_56"];
          "v2_58" = ["v2_56" "ffi/v2_58" "glib/v2_58"];
          "v2_60" = ["v2_58" "ffi/v2_60" "glib/v2_60"];
          "v2_62" = ["v2_60" "ffi/v2_62" "glib/v2_62"];
          "v2_64" = ["v2_62" "ffi/v2_64" "glib/v2_64"];
          "v2_66" = ["v2_64" "ffi/v2_66" "glib/v2_66"];
        };
      };
      "gio-sys 0.10.1" = rec {
        crateName = "gio-sys";
        version = "0.10.1";
        edition = "2015";
        sha256 = "1b2f6jvghm2djymj3qrgbqfci2f95gyhdin2pgv2qpcg5xszn92y";
        libName = "gio_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.10.1";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.10.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["ws2def" "winsock2"];
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 1.3.2";
          }
        ];
        features = {
          "v2_46" = ["v2_44"];
          "v2_48" = ["v2_46"];
          "v2_50" = ["v2_48"];
          "v2_52" = ["v2_50"];
          "v2_54" = ["v2_52"];
          "v2_56" = ["v2_54"];
          "v2_58" = ["v2_56"];
          "v2_60" = ["v2_58"];
          "v2_62" = ["v2_60"];
          "v2_64" = ["v2_62"];
        };
      };
      "gio-sys 0.14.0" = rec {
        crateName = "gio-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1yj8dx2rna07av3jwyd93s832kw8dg14zxxwqj3w5z2pdvv1v960";
        libName = "gio_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["ws2def" "winsock2"];
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_52" = ["v2_50"];
          "v2_54" = ["v2_52"];
          "v2_56" = ["v2_54"];
          "v2_58" = ["v2_56"];
          "v2_60" = ["v2_58"];
          "v2_62" = ["v2_60"];
          "v2_64" = ["v2_62"];
          "v2_66" = ["v2_64"];
        };
      };
      "glib" = rec {
        crateName = "glib";
        version = "0.14.8";
        edition = "2018";
        sha256 = "194n6w5yy869lls3pr46x5nm049cn02qsljzcgv1w5dzc8g5ylbw";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "glib-macros";
            packageId = "glib-macros";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
            rename = "ffi";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
            rename = "gobject_ffi";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "dox" = ["ffi/dox" "gobject_ffi/dox" "log_macros"];
          "log" = ["rs-log"];
          "log_macros" = ["log"];
          "rs-log" = ["dep:rs-log"];
          "v2_50" = ["ffi/v2_50"];
          "v2_52" = ["v2_50" "ffi/v2_52"];
          "v2_54" = ["v2_52" "ffi/v2_54" "gobject_ffi/v2_54"];
          "v2_56" = ["v2_54" "ffi/v2_56"];
          "v2_58" = ["v2_56" "ffi/v2_58" "gobject_ffi/v2_58"];
          "v2_60" = ["v2_58" "ffi/v2_60"];
          "v2_62" = ["v2_60" "ffi/v2_62" "gobject_ffi/v2_62"];
          "v2_64" = ["v2_62" "ffi/v2_64"];
          "v2_66" = ["v2_64" "ffi/v2_66"];
          "v2_68" = ["v2_66" "ffi/v2_68"];
        };
      };
      "glib-macros" = rec {
        crateName = "glib-macros";
        version = "0.14.1";
        edition = "2018";
        sha256 = "0675i7m7pksg4cd9kfpzjnw0x5r3y4gcac7mfgy6nyb63wv6db9a";
        procMacro = true;
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.1.0";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = ["full"];
          }
        ];
      };
      "glib-sys 0.10.1" = rec {
        crateName = "glib-sys";
        version = "0.10.1";
        edition = "2015";
        sha256 = "1hfdwilf3dnrv3pnfbwmp3h2afgwvfsapcgjfg8276kflsbvksf7";
        libName = "glib_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 1.3.2";
          }
        ];
        features = {
          "v2_46" = ["v2_44"];
          "v2_48" = ["v2_46"];
          "v2_50" = ["v2_48"];
          "v2_52" = ["v2_50"];
          "v2_54" = ["v2_52"];
          "v2_56" = ["v2_54"];
          "v2_58" = ["v2_56"];
          "v2_60" = ["v2_58"];
          "v2_62" = ["v2_60"];
          "v2_64" = ["v2_62"];
        };
      };
      "glib-sys 0.14.0" = rec {
        crateName = "glib-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1bjlymn3fw4g8slij6iiggaipknf9072mr2qm3i4a91199an078w";
        libName = "glib_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_52" = ["v2_50"];
          "v2_54" = ["v2_52"];
          "v2_56" = ["v2_54"];
          "v2_58" = ["v2_56"];
          "v2_60" = ["v2_58"];
          "v2_62" = ["v2_60"];
          "v2_64" = ["v2_62"];
          "v2_66" = ["v2_64"];
          "v2_68" = ["v2_66"];
        };
      };
      "gobject-sys 0.10.0" = rec {
        crateName = "gobject-sys";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1311d3zbdhl1g7ibj1iy1650513yrhxbjxgfhazn52ii1jv368cm";
        libName = "gobject_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.10.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 1.3.2";
          }
        ];
        features = {
          "v2_46" = ["v2_44"];
          "v2_54" = ["v2_46"];
          "v2_58" = ["v2_54"];
          "v2_62" = ["v2_58"];
        };
      };
      "gobject-sys 0.14.0" = rec {
        crateName = "gobject-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1xf3jiwzrjingq8jr15bjkbv6m5dypzp67cjnm5f7njrjzicm4ma";
        libName = "gobject_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_58" = ["v2_54"];
          "v2_62" = ["v2_58"];
          "v2_66" = ["v2_62"];
          "v2_68" = ["v2_66"];
        };
      };
      "gtk" = rec {
        crateName = "gtk";
        version = "0.14.3";
        edition = "2018";
        sha256 = "0367kb9d9x5cry6zpn2ccsahvynia6hzmr61gqrfj5rkvli13d9f";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk";
            packageId = "atk";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "field-offset";
            packageId = "field-offset";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            rename = "ffi";
          }
          {
            name = "gtk3-macros";
            packageId = "gtk3-macros";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pango";
            packageId = "pango";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = ["gdk/dox" "ffi/dox"];
          "v3_20" = ["ffi/v3_20"];
          "v3_22" = ["v3_20" "ffi/v3_22" "gdk/v3_22"];
          "v3_22_20" = ["v3_22" "ffi/v3_22"];
          "v3_22_26" = ["v3_22_20" "ffi/v3_22_26"];
          "v3_22_27" = ["v3_22_26" "ffi/v3_22_27"];
          "v3_22_29" = ["v3_22_27" "ffi/v3_22_29"];
          "v3_22_30" = ["v3_22_29" "ffi/v3_22_30"];
          "v3_24" = ["v3_22_30" "ffi/v3_24"];
          "v3_24_8" = ["v3_24" "ffi/v3_24_8"];
          "v3_24_9" = ["v3_24_8" "ffi/v3_24_9"];
        };
        resolvedDefaultFeatures = ["v3_20" "v3_22"];
      };
      "gtk-sys" = rec {
        crateName = "gtk-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "0gihp9zh4z7lycp0zbmq1w0k9ddbnd2h64jsgid7hi85vb9wh54c";
        libName = "gtk_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v3_22" = ["v3_20"];
          "v3_22_26" = ["v3_22_6"];
          "v3_22_27" = ["v3_22_26"];
          "v3_22_29" = ["v3_22_27"];
          "v3_22_30" = ["v3_22_29"];
          "v3_22_6" = ["v3_22"];
          "v3_24" = ["v3_22_30"];
          "v3_24_11" = ["v3_24_9"];
          "v3_24_8" = ["v3_24"];
          "v3_24_9" = ["v3_24_8"];
        };
        resolvedDefaultFeatures = ["v3_20" "v3_22"];
      };
      "gtk3-macros" = rec {
        crateName = "gtk3-macros";
        version = "0.14.0";
        edition = "2018";
        sha256 = "0yavfirn2iw9nsxik6m7s2cdxdrl5l5jfbiwn0zl85y1dnlivpi1";
        procMacro = true;
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.1.0";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = ["full"];
          }
        ];
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.11.2";
        edition = "2018";
        sha256 = "0vkjsf5nzs7qcia5ya79j9sq2p1caz4crrncr1675wwyj3ag0pmb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "ahash-compile-time-rng" = ["ahash/compile-time-rng"];
          "alloc" = ["dep:alloc"];
          "bumpalo" = ["dep:bumpalo"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["ahash" "inline-more"];
          "rayon" = ["dep:rayon"];
          "rustc-dep-of-std" = ["nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["raw"];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0b0kkr790p66lvzn9nsmfjvydrbmh9z5gb664jchwgw64vxiwqkd";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
      };
      "http" = rec {
        crateName = "http";
        version = "0.2.5";
        edition = "2018";
        sha256 = "0sqqidxilz83h3nr9g3hwsa0z34mh6clrrdfvvd2f66l0mmhj8qk";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1y7ca2w5qp9msgl57n03zqp78gq1bk2crqzg6kv7a542mdphm2j1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.7.0";
        edition = "2018";
        sha256 = "19b2zwfajhsfcgny0clv8y4jppy704znfhv8nv2dw9a18l2kcqxw";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = ["raw"];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "rayon" = ["dep:rayon"];
          "serde" = ["dep:serde"];
          "serde-1" = ["serde"];
        };
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0b2bx5qdlwayriidhrag8vhy10kdfimfhmb3jnjmsz2h9j1bwnvs";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
        ];
        features = {
          "js-sys" = ["dep:js-sys"];
          "stdweb" = ["dep:stdweb"];
          "wasm-bindgen" = ["js-sys" "wasm-bindgen_rs" "web-sys"];
          "wasm-bindgen_rs" = ["dep:wasm-bindgen_rs"];
          "web-sys" = ["dep:web-sys"];
        };
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1bsyxnm20x05rwc5qskrqy4cfswrcadzlwc26dkqml6hz64vipb9";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["use_std"];
          "use_std" = ["use_alloc"];
        };
        resolvedDefaultFeatures = ["default" "use_alloc" "use_std"];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1m1dairwyx8kfxi7ab3b5jc71z1vigh9w4shnhiajji9avzr26dp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "javascriptcore-rs" = rec {
        crateName = "javascriptcore-rs";
        version = "0.14.0";
        edition = "2015";
        sha256 = "09vl5jmrzzjh7a5a258arzypn06mqcbdrfigcy4jifjv8k8wgaaw";
        libName = "javascriptcore";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "javascriptcore-rs-sys";
            packageId = "javascriptcore-rs-sys 0.2.0";
          }
        ];
      };
      "javascriptcore-rs-sys 0.2.0" = rec {
        crateName = "javascriptcore-rs-sys";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1619vl48yw3wrjw4c3dfm3s5s9sizgxp5s7s1ahpbkcdl2lasiiz";
        libName = "javascriptcore_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "javascriptcore-rs-sys 0.3.3" = rec {
        crateName = "javascriptcore-rs-sys";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1qp9vk1sc8bqsiclqn3bfsdf8pg9wzs5knhpc1ndfy5i4kl2vpra";
        libName = "javascriptcore_rs_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 5.0.0";
          }
        ];
        features = {
        };
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.55";
        edition = "2018";
        sha256 = "116cg9vn62cl3vifbs6cjdsg7hz98kr7sr8kpy31liccsg6gzjbw";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = ["dep:spin"];
          "spin_no_std" = ["spin"];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.107";
        edition = "2015";
        sha256 = "06fjyglysl1aph07hc8cl1akw25lizcvwppqbralynys0hsf5rgv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["std"];
          "rustc-dep-of-std" = ["align" "rustc-std-workspace-core"];
          "rustc-std-workspace-core" = ["dep:rustc-std-workspace-core"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "extra_traits" "std"];
      };
      "line-wrap" = rec {
        crateName = "line-wrap";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1ffa2whkyh9mwvdlpk6v8pjkg8p8mlzyjfymq5adll9a18sl80zk";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "safemem";
            packageId = "safemem";
          }
        ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.5";
        edition = "2018";
        sha256 = "028izfyraynijd9h9x5miv1vmg6sjnw1v95wgm7f4xlr7h4lsaki";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "owning_ref" = ["dep:owning_ref"];
          "serde" = ["dep:serde"];
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.14";
        edition = "2015";
        sha256 = "04175hv0v62shd82qydq58a48k3bjijmk54v38zgqlbxqkkbpfai";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
        ];
        features = {
          "kv_unstable" = ["value-bag"];
          "kv_unstable_serde" = ["kv_unstable_std" "value-bag/serde" "serde"];
          "kv_unstable_std" = ["std" "kv_unstable" "value-bag/error"];
          "kv_unstable_sval" = ["kv_unstable" "value-bag/sval" "sval"];
          "serde" = ["dep:serde"];
          "sval" = ["dep:sval"];
          "value-bag" = ["dep:value-bag"];
        };
      };
      "mac-notification-sys" = rec {
        crateName = "mac-notification-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0xnsrr4102rbka57198v7gkfhivl54a456ax765x7758m5qnpyrx";
        authors = [
          "Felix Döring <development@felixdoering.com>"
          "Hendrik Sollich <hendrik@hoodie.de>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "objc-foundation";
            packageId = "objc-foundation";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0gw5ib38jfgyyah8nyyxr036grqv1arkf1srgfa4h386dav7iqx3";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.4.1";
        edition = "2018";
        sha256 = "0smq8xzd40njqpfzv5mghigj91fzlfrfg842iz8x0wqvw2dw731h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "libc" = ["dep:libc"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.6.4";
        edition = "2015";
        sha256 = "1yfx2v8kmkhr2d4gwk8ghihdwg73vapn3vvp0im06f0kgx8crb2r";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.4.4";
        edition = "2018";
        sha256 = "0jsfv00hl5rmx1nijn59sr9jmjd4rjnjhh4kdjy8d187iklih9d9";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std"];
        };
      };
      "nb-connect" = rec {
        crateName = "nb-connect";
        version = "1.2.0";
        edition = "2018";
        sha256 = "05fadcyxaz0r8pbh498y24xay3b2gb73ih3fj7hwylggqq6m9fxi";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Jayce Fayne <jayce.fayne@mailbox.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = ["all"];
          }
        ];
      };
      "ndk" = rec {
        crateName = "ndk";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0g0cgqcp13zyvy3jh2sv693gr768djdbgix53dxm43nydzq6lkfn";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            rename = "ffi";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "aaudio" = ["ffi/aaudio" "api-level-26"];
          "all" = ["aaudio" "bitmap" "hardware_buffer" "media" "trace" "api-level-30"];
          "api-level-24" = ["api-level-23"];
          "api-level-25" = ["api-level-24"];
          "api-level-26" = ["api-level-25"];
          "api-level-27" = ["api-level-26"];
          "api-level-28" = ["api-level-27"];
          "api-level-29" = ["api-level-28"];
          "api-level-30" = ["api-level-29"];
          "bitmap" = ["ffi/bitmap"];
          "hardware_buffer" = ["api-level-26"];
          "jni" = ["dep:jni"];
          "jni-glue" = ["dep:jni-glue"];
          "media" = ["ffi/media"];
          "test" = ["ffi/test" "jni" "jni-glue" "all"];
          "trace" = ["api-level-23"];
        };
      };
      "ndk-glue" = rec {
        crateName = "ndk-glue";
        version = "0.4.0";
        edition = "2018";
        sha256 = "08442fapdf3p2qm1r68ipwq95k9sd32jssmrnly7lkpj513fksfk";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
          }
          {
            name = "ndk-macro";
            packageId = "ndk-macro";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
          }
        ];
        features = {
          "android_logger" = ["dep:android_logger"];
          "logger" = ["android_logger" "ndk-macro/logger"];
          "test" = ["ndk/test" "ndk-sys/test"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "ndk-macro" = rec {
        crateName = "ndk-macro";
        version = "0.2.0";
        edition = "2018";
        sha256 = "07a8vjr4fpksssgp453bf82n73i4i17yj1lvbgvd0964glqcdl85";
        procMacro = true;
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 0.1.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "ndk-sys" = rec {
        crateName = "ndk-sys";
        version = "0.2.1";
        edition = "2018";
        sha256 = "13c68a217ag3k18vlffpcj2qjfinchxxchzlwnsp075v7p5j4jf4";
        authors = [
          "The Rust Windowing contributors"
        ];
        features = {
        };
      };
      "nix 0.17.0" = rec {
        crateName = "nix";
        version = "0.17.0";
        edition = "2015";
        sha256 = "0qvk09kib3jpvpbaps0682nav20ibql61pf1s2h8jx9v5igpir2h";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            features = ["extra_traits"];
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {
              target,
              features,
            }: ("dragonfly" == target."os");
          }
        ];
      };
      "nix 0.19.1" = rec {
        crateName = "nix";
        version = "0.19.1";
        edition = "2018";
        sha256 = "1wk1pmaf9pv84sc4jf19gm1as2yq3ydwcx0n5nc1bpsgzq6bmk5j";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            features = ["extra_traits"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {
              target,
              features,
            }: ("dragonfly" == target."os");
          }
        ];
      };
      "notify-rust" = rec {
        crateName = "notify-rust";
        version = "4.5.5";
        edition = "2018";
        sha256 = "1b1cl4b408vwpcb4wyhw5p8ailmxmmndg21a33bzszp6cnwblvna";
        authors = [
          "Hendrik Sollich <hendrik@hoodie.de>"
        ];
        dependencies = [
          {
            name = "mac-notification-sys";
            packageId = "mac-notification-sys";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            target = {
              target,
              features,
            }: ((target."unix" or false) && (!("macos" == target."os")));
          }
          {
            name = "winrt-notification";
            packageId = "winrt-notification";
            target = {
              target,
              features,
            }: ("windows" == target."os");
          }
          {
            name = "zbus";
            packageId = "zbus";
            optional = true;
            target = {
              target,
              features,
            }: ((target."unix" or false) && (!("macos" == target."os")));
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            optional = true;
            target = {
              target,
              features,
            }: ((target."unix" or false) && (!("macos" == target."os")));
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive";
            optional = true;
            target = {
              target,
              features,
            }: ((target."unix" or false) && (!("macos" == target."os")));
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "d" = ["dbus"];
          "dbus" = ["dep:dbus"];
          "default" = ["z"];
          "image" = ["dep:image"];
          "images" = ["image" "lazy_static"];
          "lazy_static" = ["dep:lazy_static"];
          "serde" = ["dep:serde"];
          "z" = ["zbus" "zvariant" "zvariant_derive" "serde"];
          "zbus" = ["dep:zbus"];
          "zvariant" = ["dep:zvariant"];
          "zvariant_derive" = ["dep:zvariant_derive"];
        };
        resolvedDefaultFeatures = ["default" "serde" "z" "zbus" "zvariant" "zvariant_derive"];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.44";
        edition = "2015";
        sha256 = "1nq152y3304as1iai95hqz8prqnc94lks1s7q05sfjdmcf56kk6j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "i128" = ["num-traits/i128"];
          "std" = ["num-traits/std"];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.14";
        edition = "2015";
        sha256 = "144j176s2p76azy2ngk2vkdzgwdc0bc8c93jhki8c9fsbknb2r4s";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "libm" = ["dep:libm"];
        };
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0vzdcrmfx70izz3ns1avaf00jgvbrlsmvm2p9y7ly33kzdax16rz";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "derivative";
            packageId = "derivative";
            features = ["use_core"];
          }
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = ["num_enum_derive/complex-expressions"];
          "default" = ["std"];
          "std" = ["num_enum_derive/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1nfdz1c7cmcq3hdjkiba2hrr0vdj82vshyg6dl4iia64c4cs0vj8";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.1.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["parsing"];
          }
        ];
        features = {
          "complex-expressions" = ["syn/full"];
          "default" = ["std"];
          "proc-macro-crate" = ["dep:proc-macro-crate"];
          "std" = ["proc-macro-crate"];
        };
        resolvedDefaultFeatures = ["proc-macro-crate" "std"];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
        ];
        features = {
          "exception" = ["objc_exception"];
          "objc_exception" = ["dep:objc_exception"];
        };
      };
      "objc-foundation" = rec {
        crateName = "objc-foundation";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1y9bwb3m5fdq7w7i4bnds067dhm4qxv4m1mbg9y61j9nkrjipp8s";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "objc";
            packageId = "objc";
          }
          {
            name = "objc_id";
            packageId = "objc_id";
          }
        ];
      };
      "objc_id" = rec {
        crateName = "objc_id";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0fq71hnp2sdblaighjc82yrac3adfmqzhpr11irhvdfp9gdlsbf9";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
          }
        ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.27.1";
        edition = "2018";
        sha256 = "1ygv9zgi9wz6q5f2z9xn72i0c97jjr1dgj30kbyicdhxk8zivb37";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = ["read" "write" "std" "compression" "wasm"];
          "alloc" = ["dep:alloc"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "compression" = ["flate2" "std"];
          "core" = ["dep:core"];
          "crc32fast" = ["dep:crc32fast"];
          "default" = ["read" "compression"];
          "doc" = ["read_core" "write_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm"];
          "flate2" = ["dep:flate2"];
          "indexmap" = ["dep:indexmap"];
          "pe" = ["coff"];
          "read" = ["read_core" "archive" "coff" "elf" "macho" "pe" "unaligned"];
          "rustc-dep-of-std" = ["core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std"];
          "std" = ["memchr/std"];
          "wasm" = ["wasmparser"];
          "wasmparser" = ["dep:wasmparser"];
          "write" = ["write_core" "coff" "elf" "macho" "pe"];
          "write_core" = ["crc32fast" "indexmap/std" "std"];
        };
        resolvedDefaultFeatures = ["archive" "coff" "elf" "macho" "pe" "read_core" "unaligned"];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.8.0";
        edition = "2018";
        sha256 = "0mkbbxg6416z11r2yzsq91cqrkj9w1iyx5hakq15h5sbnriwnbv9";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = ["race"];
          "default" = ["std"];
          "parking_lot" = ["dep:parking_lot"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "race" "std"];
      };
      "pango" = rec {
        crateName = "pango";
        version = "0.14.8";
        edition = "2018";
        sha256 = "10c5q8wl9gkjh323whq6pg9yfvr2vmz00f98z1d77jp506cdavsl";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
            rename = "ffi";
          }
        ];
        features = {
          "dox" = ["ffi/dox" "glib/dox"];
          "v1_42" = ["v1_40" "ffi/v1_42"];
          "v1_44" = ["v1_42" "ffi/v1_44"];
          "v1_46" = ["v1_44" "ffi/v1_46"];
        };
      };
      "pango-sys" = rec {
        crateName = "pango-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1zj236n9kjldf47wwlxvhshwm5zhg589a0fml5mm8qg7lnf0jrr3";
        libName = "pango_sys";
        authors = [
          "The gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v1_44" = ["v1_42"];
          "v1_46" = ["v1_44"];
        };
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.0.0";
        edition = "2018";
        sha256 = "0wnxxnizfxlax3n709s5r83f4n8awy3m4a18q4fdk0z7z693hz22";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.11.2";
        edition = "2018";
        sha256 = "16gzf41bxmm10x82bla8d6wfppy9ym3fxsmdjyvn61m66s0bf5vx";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = ["lock_api/arc_lock"];
          "deadlock_detection" = ["parking_lot_core/deadlock_detection"];
          "nightly" = ["parking_lot_core/nightly" "lock_api/nightly"];
          "owning_ref" = ["lock_api/owning_ref"];
          "serde" = ["lock_api/serde"];
          "stdweb" = ["instant/stdweb"];
          "wasm-bindgen" = ["instant/wasm-bindgen"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.8.5";
        edition = "2018";
        sha256 = "05ij4zxsylx99srbq8qd1k2wiwaq8krkf9y4cqkhvb5wjca8wvnp";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.10";
            target = {
              target,
              features,
            }: ("redox" == target."os");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi"];
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "deadlock_detection" = ["petgraph" "thread-id" "backtrace"];
          "petgraph" = ["dep:petgraph"];
          "thread-id" = ["dep:thread-id"];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.1.3";
        edition = "2015";
        sha256 = "0lry80bm90x47nq71wxq83kjrm9ashpz4kbm92p90ysdx4m8gx0h";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
          }
        ];
        features = {
          "pretty-print" = ["serde" "serde_json"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
        };
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.7";
        edition = "2018";
        sha256 = "0hwl8iyx3h9i3i3jr2vqj07nf4ay1v1w1ga29cbjmdd6d4fd2ccd";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.22";
        edition = "2015";
        sha256 = "07vy6mn0q6k2adrs7min3rpy999q7kprph0vb1414iwlybs5sa8j";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
      };
      "plist" = rec {
        crateName = "plist";
        version = "1.2.1";
        edition = "2018";
        sha256 = "04b7kpm46qiivclc9kp397vfqdasvdjhr79hfvg2mbzffdnh53d3";
        authors = [
          "Ed Barnard <eabarnard@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "line-wrap";
            packageId = "line-wrap";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
            rename = "xml_rs";
          }
        ];
        features = {
          "default" = ["serde"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde"];
      };
      "polling" = rec {
        crateName = "polling";
        version = "2.2.0";
        edition = "2018";
        sha256 = "0najvslgg2zclsnxay071jdw0bna7f0abqvgx3isv7w817ah8m38";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("fuchsia" == target."os") || ("vxworks" == target."os"));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "wepoll-ffi";
            packageId = "wepoll-ffi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["null-overlapped-wakeups-patch"];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["ioapiset" "winsock2"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "proc-macro-crate 0.1.5" = rec {
        crateName = "proc-macro-crate";
        version = "0.1.5";
        edition = "2018";
        sha256 = "11cpihdk9ba68hzw95aa8zxn0i5g6kdrfd4l2cy3d5jvb72a6vhx";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml";
          }
        ];
      };
      "proc-macro-crate 1.1.0" = rec {
        crateName = "proc-macro-crate";
        version = "1.1.0";
        edition = "2018";
        sha256 = "10vgiwpp9rbi999pbn67p3r560z92bpfqszpsfs8ky6ai5lcxfhy";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];
      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = ["syn-error"];
          "syn" = ["dep:syn"];
          "syn-error" = ["syn"];
        };
        resolvedDefaultFeatures = ["default" "syn" "syn-error"];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.19";
        edition = "2018";
        sha256 = "1rg0kzsj7lj00qj602d3h77spwfz48vixn1wbjp7a4yrq65w9w6v";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.7";
        edition = "2015";
        sha256 = "11hh1jynh62f3m1ii0f9gf1l3y0fhkwpmr40lz3704v848n1p25w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.32";
        edition = "2018";
        sha256 = "0hqbxlvhiaybakl1gai3mgps1dxsmxricxsr2rfdrh222z0qql5s";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = ["proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.10";
        edition = "2018";
        sha256 = "01ff7a76f871ggnby57iagw6499vci4bihcr11g6bqzjlp38rg1q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["proc-macro"];
          "proc-macro" = ["proc-macro2/proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "raw-window-handle" = rec {
        crateName = "raw-window-handle";
        version = "0.3.3";
        edition = "2018";
        sha256 = "04c2wir7qq3g2b143yav52a1g5ack8ffqx2bpmrn9bc0dix1li0a";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
      };
      "redox_syscall 0.1.57" = rec {
        crateName = "redox_syscall";
        version = "0.1.57";
        edition = "2015";
        sha256 = "1kh59fpwy33w9nwd5iyc283yglq8pf2s41hnhvl48iax9mz0zk21";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
      };
      "redox_syscall 0.2.10" = rec {
        crateName = "redox_syscall";
        version = "0.2.10";
        edition = "2018";
        sha256 = "1zq36bhw4c6xig340ja1jmr36iy0d3djp8smsabxx71676bg70w3";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.3.5";
        edition = "2015";
        sha256 = "179fxmyqaqzibp533ajgbn4ljah9lrzpqvd3i73h55bs7qrkf1yy";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.1.57";
          }
          {
            name = "rust-argon2";
            packageId = "rust-argon2";
            optional = true;
          }
        ];
        features = {
          "auth" = ["rust-argon2"];
          "default" = ["auth"];
          "rust-argon2" = ["dep:rust-argon2"];
        };
        resolvedDefaultFeatures = ["auth" "default" "rust-argon2"];
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.16.20";
        edition = "2018";
        sha256 = "1z682xp7v38ayq9g9nkbhhfpj6ygralmlx7wdmsfv8rnw99cylrh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("android" == target."os") || ("linux" == target."os"));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("android" == target."os") || ("linux" == target."os"));
            features = ["std"];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("dragonfly" == target."os") || ("freebsd" == target."os") || ("illumos" == target."os") || ("netbsd" == target."os") || ("openbsd" == target."os") || ("solaris" == target."os"));
            features = ["std"];
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("x86" == target."arch") || ("x86_64" == target."arch") || ((("aarch64" == target."arch") || ("arm" == target."arch")) && (("android" == target."os") || ("fuchsia" == target."os") || ("linux" == target."os"))));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch") && ("unknown" == target."vendor") && ("unknown" == target."os") && ("" == target."env"));
            features = ["Crypto" "Window"];
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("windows" == target."os");
            features = ["ntsecapi" "wtypesbase"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."unix" or false) || (target."windows" or false));
          }
        ];
        features = {
          "default" = ["alloc" "dev_urandom_fallback"];
          "dev_urandom_fallback" = ["once_cell"];
          "once_cell" = ["dep:once_cell"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "dev_urandom_fallback" "once_cell"];
      };
      "runas" = rec {
        crateName = "runas";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1687dblmizzz4vb8062hf4jjfa06ikaycf84bjidy30q9acv0856";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "which";
            packageId = "which";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "rust-argon2" = rec {
        crateName = "rust-argon2";
        version = "0.8.3";
        edition = "2018";
        sha256 = "1yvqkv04fqk3cbvyasibr4bqbxa6mij8jdvibakwlcsbjh6q462b";
        libName = "argon2";
        authors = [
          "Martijn Rijkeboer <mrr@sru-systems.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            optional = true;
          }
        ];
        features = {
          "crossbeam-utils" = ["dep:crossbeam-utils"];
          "default" = ["crossbeam-utils"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["crossbeam-utils" "default"];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.21";
        edition = "2015";
        sha256 = "0hn3xyd2n3bg3jnc5a5jbzll32n4r5a65bqzs287l30m5c53xw3y";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1vjmw7xcdri0spsf24mkpwpph853wrbqppihhw061i2igh4f5pzh";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.20.0";
        edition = "2018";
        sha256 = "15gw27kk0rr7wchga4c0gz6gx1v7lwk8acp278fxq954ih3wcnlv";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "sct";
            packageId = "sct";
          }
          {
            name = "webpki";
            packageId = "webpki";
            features = ["alloc" "std"];
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = ["logging" "tls12"];
          "log" = ["dep:log"];
          "logging" = ["log"];
        };
        resolvedDefaultFeatures = ["default" "log" "logging" "tls12"];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.5";
        edition = "2018";
        sha256 = "0vpqv1dj7fksa6hm3zpk5rbsjs0ifbfy7xwzsyyil0rx37a03lvi";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "safemem" = rec {
        crateName = "safemem";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0wp0d2b2284lw11xhybhaszsczpbq1jbdklkxgifldcknmy3nw7g";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1hj8lifzvivdb1z02lfnzkshpvk85nkgzxsy2hc0zky9wf894spa";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["use_std"];
        };
        resolvedDefaultFeatures = ["default" "use_std"];
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.7.0";
        edition = "2018";
        sha256 = "193w3dg2pcn7138ab4c586pl76nkryn4h6wqlwvqj5gqr6vwsgfm";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1dn6064fipjymnmjccyjhb70miyvqvp08gvw1wbg8vbg4c8ay0gk";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = ["serde" "diesel/sqlite"];
          "diesel" = ["dep:diesel"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.10.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1xqijhqhx3bn77xnl1mlcp032hz8nv7n2fbdacbdzq7rnzsvxc00";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
        ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.130";
        edition = "2015";
        sha256 = "04y9s1mxcxakg9bhfdiff9w4zzprk6m6dazcpmpi8nfg6zg0cbgi";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["serde_derive"];
          "serde_derive" = ["dep:serde_derive"];
        };
        resolvedDefaultFeatures = ["default" "derive" "serde_derive" "std"];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.130";
        edition = "2015";
        sha256 = "12shxhi47db54i4j44ic2nl299x5p89ngna0w3m6854nn4d1mg6p";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.69";
        edition = "2018";
        sha256 = "1y22sfi9z3bkf9j6qnd036cqgraq0kr94ss7sghcfa8i8d78crp4";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["serde/alloc"];
          "default" = ["std"];
          "indexmap" = ["dep:indexmap"];
          "preserve_order" = ["indexmap"];
          "std" = ["serde/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1mcy39p1g3z49rzzsadfhpy6yv2f3zx9ihhplbpjk32i01lm3l4q";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "single-instance" = rec {
        crateName = "single-instance";
        version = "0.3.2";
        edition = "2015";
        sha256 = "0r0hvhfsfkgyaqfqya988mrbm5h3b4aa7wirmhwnnvdafaj3bqi3";
        authors = [
          "wlbf <lbf1353@live.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "nix";
            packageId = "nix 0.19.1";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "widestring";
            packageId = "widestring 0.4.3";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["synchapi" "winnt" "errhandlingapi" "winerror" "handleapi"];
          }
        ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.5";
        edition = "2018";
        sha256 = "1ddg01hf8h4bpfm027h0snhb7jfcs1jzi497083y13q13vyr3vwx";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.7.0";
        edition = "2018";
        sha256 = "02gka690j8l12gl50ifg7axqnx1m6v6d1byaq0wl3fx66p3vdjhy";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "const_new" = ["const_generics"];
          "serde" = ["dep:serde"];
        };
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.4.2";
        edition = "2018";
        sha256 = "05imvybc86slkbg6sj9rd1xy9a8ydn1v2bcqjqr346myqzk0zjax";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["handleapi" "ws2ipdef" "ws2tcpip"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["all"];
      };
      "soup-sys" = rec {
        crateName = "soup-sys";
        version = "0.10.0";
        edition = "2015";
        sha256 = "0gm1b1dj6z3l94sklw6jvqblhik8i8gz2mgrf6xhnqv5hpqaviy3";
        libName = "soup_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.10.1";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.10.1";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.10.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 1.3.2";
          }
        ];
        features = {
          "v2_26" = ["v2_24"];
          "v2_26_3" = ["v2_26"];
          "v2_28" = ["v2_26_3"];
          "v2_30" = ["v2_28"];
          "v2_32" = ["v2_30"];
          "v2_34" = ["v2_32"];
          "v2_36" = ["v2_34"];
          "v2_38" = ["v2_36"];
          "v2_40" = ["v2_38"];
          "v2_42" = ["v2_40"];
          "v2_44" = ["v2_42"];
          "v2_46" = ["v2_44"];
          "v2_48" = ["v2_46"];
          "v2_50" = ["v2_48"];
          "v2_52" = ["v2_50"];
          "v2_54" = ["v2_52"];
          "v2_56" = ["v2_54"];
          "v2_58" = ["v2_56"];
          "v2_60" = ["v2_58"];
          "v2_62" = ["v2_60"];
          "v2_66" = ["v2_62"];
          "v2_68" = ["v2_66"];
          "v2_70" = ["v2_68"];
        };
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.9.3";
        edition = "2015";
        sha256 = "0k497pv882qn3q977ckznm13vxx927g8s1swvcv68j3c1pccwik4";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
      };
      "strum 0.18.0" = rec {
        crateName = "strum";
        version = "0.18.0";
        edition = "2015";
        sha256 = "0asjskn1qhqqfiq673np0gvmnd1rsp506m38vk53gi7l93mq3gap";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "derive" = ["strum_macros"];
          "strum_macros" = ["dep:strum_macros"];
        };
      };
      "strum 0.21.0" = rec {
        crateName = "strum";
        version = "0.21.0";
        edition = "2018";
        sha256 = "1qnd2by1zrwgx7li0hmwy7jbzjwz1ky697qjg85nga8zzny6py5a";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        features = {
          "derive" = ["strum_macros"];
          "strum_macros" = ["dep:strum_macros"];
        };
      };
      "strum 0.22.0" = rec {
        crateName = "strum";
        version = "0.22.0";
        edition = "2018";
        sha256 = "17kjz02z1wwfw1rcfdsmsbpazngnqhz23zhwychql727gly8kb7p";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.22.0";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.22.0";
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["strum_macros"];
          "strum_macros" = ["dep:strum_macros"];
        };
        resolvedDefaultFeatures = ["default" "derive" "std" "strum_macros"];
      };
      "strum_macros 0.18.0" = rec {
        crateName = "strum_macros";
        version = "0.18.0";
        edition = "2015";
        sha256 = "0k3pwbv0c8q00jnsjshzfc2d5r3y6ppgf9fz7pyknrgaz2immj47";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["parsing" "extra-traits"];
          }
        ];
        features = {
        };
      };
      "strum_macros 0.21.1" = rec {
        crateName = "strum_macros";
        version = "0.21.1";
        edition = "2018";
        sha256 = "1v55b1in7dn07s6vxr8dajqpvxkxjbfq6qamnjgcbnq9x3pawsnh";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["parsing" "extra-traits"];
          }
        ];
      };
      "strum_macros 0.22.0" = rec {
        crateName = "strum_macros";
        version = "0.22.0";
        edition = "2018";
        sha256 = "1yz9ia03p3xbndhjbcmxjifh1r43cchynzxcqx23g7jliffpk7rk";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["parsing" "extra-traits"];
          }
        ];
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.81";
        edition = "2018";
        sha256 = "0rh9hvwy75j3krmi4d4x76xb86f753hxr8mlxjbabddyp0cfxbzj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = ["derive" "parsing" "printing" "clone-impls" "proc-macro"];
          "printing" = ["quote"];
          "proc-macro" = ["proc-macro2/proc-macro" "quote/proc-macro"];
          "quote" = ["dep:quote"];
          "test" = ["syn-test-suite/all-features"];
        };
        resolvedDefaultFeatures = ["clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit"];
      };
      "system-deps 1.3.2" = rec {
        crateName = "system-deps";
        version = "1.3.2";
        edition = "2018";
        sha256 = "16v4ljmj8sj030mdcc1yk615vciqlyxi7csq6lxka6cs4qbwqghg";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "strum";
            packageId = "strum 0.18.0";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.18.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml";
            usesDefaultFeatures = false;
          }
          {
            name = "version-compare";
            packageId = "version-compare 0.0.10";
          }
        ];
      };
      "system-deps 3.2.0" = rec {
        crateName = "system-deps";
        version = "3.2.0";
        edition = "2018";
        sha256 = "19ig3hxgyq9d7qy8cwpl74l75ay2w0y0a4rginqb68h7hygjc328";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cfg-expr";
            packageId = "cfg-expr 0.8.1";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "strum";
            packageId = "strum 0.21.0";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.21.1";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml";
            usesDefaultFeatures = false;
          }
          {
            name = "version-compare";
            packageId = "version-compare 0.0.11";
          }
        ];
        devDependencies = [
          {
            name = "itertools";
            packageId = "itertools";
          }
        ];
      };
      "system-deps 5.0.0" = rec {
        crateName = "system-deps";
        version = "5.0.0";
        edition = "2018";
        sha256 = "0zkrf58z96y3f5ggglqirc97iy9rvyippkq67vkx0yyvaiaqbnqq";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "cfg-expr";
            packageId = "cfg-expr 0.9.0";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "toml";
            packageId = "toml";
            usesDefaultFeatures = false;
          }
          {
            name = "version-compare";
            packageId = "version-compare 0.0.11";
          }
        ];
      };
      "tao" = rec {
        crateName = "tao";
        version = "0.5.2";
        edition = "2018";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src =
          if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion))
          then
            lib.cleanSourceWith {
              filter = sourceFilter;
              src = ./vendor-fixed/tao;
            }
          else ./vendor-fixed/tao;
        authors = [
          "Tauri Programme within The Commons Conservancy"
          "The winit contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.2";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "core-graphics";
            packageId = "core-graphics 0.22.3";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "core-video-sys";
            packageId = "core-video-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("macos" == target."os");
            features = ["display_link"];
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "gdk";
            packageId = "gdk";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
            features = ["v3_22"];
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
            features = ["v2_36_8"];
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "gio";
            packageId = "gio";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "glib";
            packageId = "glib";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "gtk";
            packageId = "gtk";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
            features = ["v3_22"];
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
            target = {
              target,
              features,
            }: ("android" == target."os");
          }
          {
            name = "ndk-glue";
            packageId = "ndk-glue";
            target = {
              target,
              features,
            }: ("android" == target."os");
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = {
              target,
              features,
            }: ("android" == target."os");
          }
          {
            name = "objc";
            packageId = "objc";
            target = {
              target,
              features,
            }: (("ios" == target."os") || ("macos" == target."os"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = {
              target,
              features,
            }: ("windows" == target."os");
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["serde_derive"];
          }
          {
            name = "tauri-libappindicator";
            packageId = "tauri-libappindicator";
            optional = true;
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            target = {
              target,
              features,
            }: ("windows" == target."os");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: ("windows" == target."os");
            features = ["combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winnls" "winuser" "impl-default"];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
        ];
        features = {
          "ayatana" = ["libayatana-appindicator"];
          "default" = ["tray"];
          "dox" = ["gtk/dox"];
          "libayatana-appindicator" = ["dep:libayatana-appindicator"];
          "serde" = ["dep:serde"];
          "tauri-libappindicator" = ["dep:tauri-libappindicator"];
          "tray" = ["tauri-libappindicator"];
        };
        resolvedDefaultFeatures = ["serde" "tauri-libappindicator" "tray"];
      };
      "tauri-libappindicator" = rec {
        crateName = "tauri-libappindicator";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1wlyh4xwwzqdhkqimn2rvd044iwadl9x96hmv8i125033fzmfq5g";
        libName = "libappindicator";
        dependencies = [
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "gtk";
            packageId = "gtk";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tauri-libappindicator-sys";
            packageId = "tauri-libappindicator-sys";
          }
        ];
      };
      "tauri-libappindicator-sys" = rec {
        crateName = "tauri-libappindicator-sys";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1b9xybcv3w32d4sz6c4fjia7wdnl1wvajgqysffxc9fgf5qq22n4";
        libName = "libappindicator_sys";
        dependencies = [
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.30";
        edition = "2018";
        sha256 = "05y4wm29ck8flwq5k1q6nhwh00a3b30cz3xr0qvnbwad5vjsnjw5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.30";
        edition = "2018";
        sha256 = "0jviwmvx6wzawsj6c9msic7h419wmsbjagl9dzhpydkzc8zzscma";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.44";
        edition = "2015";
        sha256 = "0m9jwy2pcmk232r3b9r80fs12mkckfjffjha4qfaxcdq9a8ydfbd";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "wasi";
            packageId = "wasi 0.10.0+wasi-snapshot-preview1";
            target = {
              target,
              features,
            }: ("wasi" == target."os");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi"];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = ["std" "processthreadsapi" "winbase"];
          }
        ];
        features = {
          "rustc-serialize" = ["dep:rustc-serialize"];
        };
      };
      "tinyfiledialogs" = rec {
        crateName = "tinyfiledialogs";
        version = "3.8.3";
        edition = "2015";
        sha256 = "0ssfllapvwx77m5cbyyjxfdxhvq9mbxr4pna1kbsgdxwbhvv4icm";
        authors = [
          "Guillaume Vareille <vareille@users.sourceforge.net>"
          "Josh Matthews <josh@joshmatthews.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.5.1";
        edition = "2018";
        sha256 = "1lnqnva56673r0d40586rkzyl2qqcz19wm29q8h5a95n89d1s71c";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["tinyvec_macros"];
          "arbitrary" = ["dep:arbitrary"];
          "real_blackbox" = ["criterion/real_blackbox"];
          "rustc_1_55" = ["rustc_1_40"];
          "serde" = ["dep:serde"];
          "tinyvec_macros" = ["dep:tinyvec_macros"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "tinyvec_macros"];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0p5zvgbas5nh403fbxica819mf3g83n8g2hzpfazfr56w6klv9yd";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.8";
        edition = "2018";
        sha256 = "1apcmjrrjw429pjw7mqlmdwwd67g8305vwqy4kw3swr612bl44d3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = ["dep:indexmap"];
          "preserve_order" = ["indexmap"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.3";
        edition = "2018";
        sha256 = "072cblf8v3wzyaz3lhbpzgil4s03dpzg1ppy3gqx2l4v622y3pjn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.7";
        edition = "2018";
        sha256 = "13v7v8pp7mdqqf0ypk73va78c3b4xzpryvbls9p47nz3cd34008s";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = ["std"];
          "flame" = ["dep:flame"];
          "flame_it" = ["flame" "flamer"];
          "flamer" = ["dep:flamer"];
          "serde" = ["dep:serde"];
          "with_serde" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.19";
        edition = "2018";
        sha256 = "1yabhmg8zlcksda3ajly9hpbzqgbhknxwch8dwkfkaa1569r0ifm";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.8.0";
        edition = "2018";
        sha256 = "0nrqfgxkh00wb5dhl0874z20789i2yjimp6ndgh4ay4yjjd895c8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1wrkgcw557v311dkdb6n2hrix9dm2qdsb1zpw7pn79l03zb85jwc";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0jkbqaj9d3v5a91pp3wp9mffvng1nhycx6sh4qkdd9qyr62ccmm1";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
      };
      "ureq" = rec {
        crateName = "ureq";
        version = "2.3.0";
        edition = "2018";
        sha256 = "0zz0xgl0zd49bch8qr92b44865izw59cf6npqi8935cns2ii5n8x";
        authors = [
          "Martin Algesten <martin@algesten.se>"
          "Jacob Hoffman-Andrews <ureq@hoffman-andrews.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "chunked_transfer";
            packageId = "chunked_transfer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webpki";
            packageId = "webpki";
            optional = true;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            features = ["dangerous_configuration"];
          }
        ];
        features = {
          "charset" = ["encoding_rs"];
          "cookie" = ["dep:cookie"];
          "cookie_store" = ["dep:cookie_store"];
          "cookies" = ["cookie" "cookie_store"];
          "default" = ["tls"];
          "encoding_rs" = ["dep:encoding_rs"];
          "json" = ["serde" "serde_json"];
          "native-certs" = ["rustls-native-certs"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "socks" = ["dep:socks"];
          "socks-proxy" = ["socks"];
          "tls" = ["rustls" "webpki" "webpki-roots"];
          "webpki" = ["dep:webpki"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["default" "rustls" "tls" "webpki" "webpki-roots"];
      };
      "url" = rec {
        crateName = "url";
        version = "2.2.2";
        edition = "2018";
        sha256 = "132pzpvfvpw33gjlzqd55n5iag9qddzffq8qbp1myfykna1w61x5";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "urlencoding" = rec {
        crateName = "urlencoding";
        version = "1.3.3";
        edition = "2018";
        sha256 = "1yqgq2qigm1s8zyv23j0422j4vn20ppnnizx9b7p629sw1sh27ss";
        authors = [
          "Kornel <kornel@geekhood.net>"
          "Bertram Truong <b@bertramtruong.com>"
        ];
      };
      "version-compare 0.0.10" = rec {
        crateName = "version-compare";
        version = "0.0.10";
        edition = "2018";
        sha256 = "18ack6rx18rp700h1dncljmpzchs3p2dfh76a8ds6vmfbfi5cdfn";
        authors = [
          "timvisee <timvisee@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "version-compare 0.0.11" = rec {
        crateName = "version-compare";
        version = "0.0.11";
        edition = "2018";
        sha256 = "06v688jg6gd00zvm3cp7qh2h3mz8cs2ngr09bnwxhyddxrcwh60w";
        authors = [
          "Tim Visee <3a4fb3964f@sinenomine.email>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.3";
        edition = "2015";
        sha256 = "1zmkcgj2m0pq0l4wnhrp1wl1lygf7x2h5p7pvjwc4719lnlxrv2z";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "waker-fn" = rec {
        crateName = "waker-fn";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1jpfiis0frk2b36krqvk8264kgxk2dyhfzjsr8g3wah1nii2qnwx";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
      };
      "wasi 0.10.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.10.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "07y3l8mzfzzz4cj09c8y90yak4hpsi9g7pllyzpr6xvwrabka50s";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "rustc-std-workspace-alloc"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "rustc-std-workspace-alloc"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.78";
        edition = "2018";
        sha256 = "1kkzwj24z9ad7lq8c5ynlnpxpx8hwra6w6brl871a6dj6vi76bv3";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if 1.0.0";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = ["spans" "std"];
          "enable-interning" = ["std"];
          "serde" = ["dep:serde"];
          "serde-serialize" = ["serde" "serde_json" "std"];
          "serde_json" = ["dep:serde_json"];
          "spans" = ["wasm-bindgen-macro/spans"];
          "strict-macro" = ["wasm-bindgen-macro/strict-macro"];
          "xxx_debug_only_print_generated_code" = ["wasm-bindgen-macro/xxx_debug_only_print_generated_code"];
        };
        resolvedDefaultFeatures = ["default" "spans" "std"];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.78";
        edition = "2018";
        sha256 = "0yw3ma0ahd1cz3afxpqcgwy9rwwgmz2g8pn8nas7c95sky7vy5x3";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["full"];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.78";
        edition = "2018";
        sha256 = "1ydcppds5qbj77c7kdinkg9qidcf7ahvwqvnb3v8nllmqkklcqfm";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = ["wasm-bindgen-macro-support/spans"];
          "strict-macro" = ["wasm-bindgen-macro-support/strict-macro"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.78";
        edition = "2018";
        sha256 = "1ay5qmbqh8hbsgf2dqkg7ia13srx3c1d6p2qvjmzhdaqlbpf00vq";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["visit" "full"];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
          "spans" = ["wasm-bindgen-backend/spans"];
        };
        resolvedDefaultFeatures = ["spans"];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.78";
        edition = "2018";
        sha256 = "1k27dc57h0brx5ish4dwmzibyif7m9lfagvph1a7s0ygi4kj6dq2";
        authors = [
          "The wasm-bindgen Developers"
        ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.55";
        edition = "2018";
        sha256 = "1yz9dym9y9f9s1f99q5j5kl2dfc5kn2jpjfdnnkfmnar3igi1srq";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = ["EventTarget"];
          "AnalyserNode" = ["AudioNode" "EventTarget"];
          "Animation" = ["EventTarget"];
          "AnimationEvent" = ["Event"];
          "AnimationPlaybackEvent" = ["Event"];
          "Attr" = ["EventTarget" "Node"];
          "AudioBufferSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "AudioContext" = ["BaseAudioContext" "EventTarget"];
          "AudioDestinationNode" = ["AudioNode" "EventTarget"];
          "AudioNode" = ["EventTarget"];
          "AudioProcessingEvent" = ["Event"];
          "AudioScheduledSourceNode" = ["AudioNode" "EventTarget"];
          "AudioStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "AudioTrackList" = ["EventTarget"];
          "AudioWorklet" = ["Worklet"];
          "AudioWorkletGlobalScope" = ["WorkletGlobalScope"];
          "AudioWorkletNode" = ["AudioNode" "EventTarget"];
          "AuthenticatorAssertionResponse" = ["AuthenticatorResponse"];
          "AuthenticatorAttestationResponse" = ["AuthenticatorResponse"];
          "BaseAudioContext" = ["EventTarget"];
          "BatteryManager" = ["EventTarget"];
          "BeforeUnloadEvent" = ["Event"];
          "BiquadFilterNode" = ["AudioNode" "EventTarget"];
          "BlobEvent" = ["Event"];
          "Bluetooth" = ["EventTarget"];
          "BluetoothAdvertisingEvent" = ["Event"];
          "BluetoothDevice" = ["EventTarget"];
          "BluetoothPermissionResult" = ["EventTarget" "PermissionStatus"];
          "BluetoothRemoteGattCharacteristic" = ["EventTarget"];
          "BluetoothRemoteGattService" = ["EventTarget"];
          "BroadcastChannel" = ["EventTarget"];
          "CanvasCaptureMediaStream" = ["EventTarget" "MediaStream"];
          "CdataSection" = ["CharacterData" "EventTarget" "Node" "Text"];
          "ChannelMergerNode" = ["AudioNode" "EventTarget"];
          "ChannelSplitterNode" = ["AudioNode" "EventTarget"];
          "CharacterData" = ["EventTarget" "Node"];
          "ChromeWorker" = ["EventTarget" "Worker"];
          "Clipboard" = ["EventTarget"];
          "ClipboardEvent" = ["Event"];
          "CloseEvent" = ["Event"];
          "Comment" = ["CharacterData" "EventTarget" "Node"];
          "CompositionEvent" = ["Event" "UiEvent"];
          "ConstantSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "ConvolverNode" = ["AudioNode" "EventTarget"];
          "CssAnimation" = ["Animation" "EventTarget"];
          "CssConditionRule" = ["CssGroupingRule" "CssRule"];
          "CssCounterStyleRule" = ["CssRule"];
          "CssFontFaceRule" = ["CssRule"];
          "CssFontFeatureValuesRule" = ["CssRule"];
          "CssGroupingRule" = ["CssRule"];
          "CssImportRule" = ["CssRule"];
          "CssKeyframeRule" = ["CssRule"];
          "CssKeyframesRule" = ["CssRule"];
          "CssMediaRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssNamespaceRule" = ["CssRule"];
          "CssPageRule" = ["CssRule"];
          "CssStyleRule" = ["CssRule"];
          "CssStyleSheet" = ["StyleSheet"];
          "CssSupportsRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssTransition" = ["Animation" "EventTarget"];
          "CustomEvent" = ["Event"];
          "DedicatedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "DelayNode" = ["AudioNode" "EventTarget"];
          "DeviceLightEvent" = ["Event"];
          "DeviceMotionEvent" = ["Event"];
          "DeviceOrientationEvent" = ["Event"];
          "DeviceProximityEvent" = ["Event"];
          "Document" = ["EventTarget" "Node"];
          "DocumentFragment" = ["EventTarget" "Node"];
          "DocumentTimeline" = ["AnimationTimeline"];
          "DocumentType" = ["EventTarget" "Node"];
          "DomMatrix" = ["DomMatrixReadOnly"];
          "DomPoint" = ["DomPointReadOnly"];
          "DomRect" = ["DomRectReadOnly"];
          "DomRequest" = ["EventTarget"];
          "DragEvent" = ["Event" "MouseEvent" "UiEvent"];
          "DynamicsCompressorNode" = ["AudioNode" "EventTarget"];
          "Element" = ["EventTarget" "Node"];
          "ErrorEvent" = ["Event"];
          "EventSource" = ["EventTarget"];
          "ExtendableEvent" = ["Event"];
          "ExtendableMessageEvent" = ["Event" "ExtendableEvent"];
          "FetchEvent" = ["Event" "ExtendableEvent"];
          "FetchObserver" = ["EventTarget"];
          "File" = ["Blob"];
          "FileReader" = ["EventTarget"];
          "FileSystemDirectoryEntry" = ["FileSystemEntry"];
          "FileSystemFileEntry" = ["FileSystemEntry"];
          "FocusEvent" = ["Event" "UiEvent"];
          "FontFaceSet" = ["EventTarget"];
          "FontFaceSetLoadEvent" = ["Event"];
          "GainNode" = ["AudioNode" "EventTarget"];
          "GamepadAxisMoveEvent" = ["Event" "GamepadEvent"];
          "GamepadButtonEvent" = ["Event" "GamepadEvent"];
          "GamepadEvent" = ["Event"];
          "GpuDevice" = ["EventTarget"];
          "GpuUncapturedErrorEvent" = ["Event"];
          "HashChangeEvent" = ["Event"];
          "Hid" = ["EventTarget"];
          "HidConnectionEvent" = ["Event"];
          "HidDevice" = ["EventTarget"];
          "HidInputReportEvent" = ["Event"];
          "HtmlAnchorElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAudioElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "HtmlBaseElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBodyElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlButtonElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlCanvasElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDetailsElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDialogElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDirectoryElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDivElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDocument" = ["Document" "EventTarget" "Node"];
          "HtmlElement" = ["Element" "EventTarget" "Node"];
          "HtmlEmbedElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFieldSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFontElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFormControlsCollection" = ["HtmlCollection"];
          "HtmlFormElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadingElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHtmlElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlIFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlImageElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlInputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLabelElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLegendElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLiElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLinkElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMapElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMediaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuItemElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMetaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMeterElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlModElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlObjectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptGroupElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionsCollection" = ["HtmlCollection"];
          "HtmlOutputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParagraphElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParamElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPictureElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPreElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlProgressElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlQuoteElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlScriptElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSelectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSlotElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSourceElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSpanElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlStyleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCaptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCellElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableColElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableRowElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableSectionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTemplateElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTextAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTimeElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTitleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTrackElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUnknownElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlVideoElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "IdbCursorWithValue" = ["IdbCursor"];
          "IdbDatabase" = ["EventTarget"];
          "IdbFileHandle" = ["EventTarget"];
          "IdbFileRequest" = ["DomRequest" "EventTarget"];
          "IdbLocaleAwareKeyRange" = ["IdbKeyRange"];
          "IdbMutableFile" = ["EventTarget"];
          "IdbOpenDbRequest" = ["EventTarget" "IdbRequest"];
          "IdbRequest" = ["EventTarget"];
          "IdbTransaction" = ["EventTarget"];
          "IdbVersionChangeEvent" = ["Event"];
          "IirFilterNode" = ["AudioNode" "EventTarget"];
          "ImageCaptureErrorEvent" = ["Event"];
          "InputEvent" = ["Event" "UiEvent"];
          "KeyboardEvent" = ["Event" "UiEvent"];
          "KeyframeEffect" = ["AnimationEffect"];
          "LocalMediaStream" = ["EventTarget" "MediaStream"];
          "MediaDevices" = ["EventTarget"];
          "MediaElementAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaEncryptedEvent" = ["Event"];
          "MediaKeyError" = ["Event"];
          "MediaKeyMessageEvent" = ["Event"];
          "MediaKeySession" = ["EventTarget"];
          "MediaQueryList" = ["EventTarget"];
          "MediaQueryListEvent" = ["Event"];
          "MediaRecorder" = ["EventTarget"];
          "MediaRecorderErrorEvent" = ["Event"];
          "MediaSource" = ["EventTarget"];
          "MediaStream" = ["EventTarget"];
          "MediaStreamAudioDestinationNode" = ["AudioNode" "EventTarget"];
          "MediaStreamAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaStreamEvent" = ["Event"];
          "MediaStreamTrack" = ["EventTarget"];
          "MediaStreamTrackEvent" = ["Event"];
          "MessageEvent" = ["Event"];
          "MessagePort" = ["EventTarget"];
          "MidiAccess" = ["EventTarget"];
          "MidiConnectionEvent" = ["Event"];
          "MidiInput" = ["EventTarget" "MidiPort"];
          "MidiMessageEvent" = ["Event"];
          "MidiOutput" = ["EventTarget" "MidiPort"];
          "MidiPort" = ["EventTarget"];
          "MouseEvent" = ["Event" "UiEvent"];
          "MouseScrollEvent" = ["Event" "MouseEvent" "UiEvent"];
          "MutationEvent" = ["Event"];
          "NetworkInformation" = ["EventTarget"];
          "Node" = ["EventTarget"];
          "Notification" = ["EventTarget"];
          "NotificationEvent" = ["Event" "ExtendableEvent"];
          "OfflineAudioCompletionEvent" = ["Event"];
          "OfflineAudioContext" = ["BaseAudioContext" "EventTarget"];
          "OfflineResourceList" = ["EventTarget"];
          "OffscreenCanvas" = ["EventTarget"];
          "OscillatorNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "PageTransitionEvent" = ["Event"];
          "PaintWorkletGlobalScope" = ["WorkletGlobalScope"];
          "PannerNode" = ["AudioNode" "EventTarget"];
          "PaymentMethodChangeEvent" = ["Event" "PaymentRequestUpdateEvent"];
          "PaymentRequestUpdateEvent" = ["Event"];
          "Performance" = ["EventTarget"];
          "PerformanceMark" = ["PerformanceEntry"];
          "PerformanceMeasure" = ["PerformanceEntry"];
          "PerformanceNavigationTiming" = ["PerformanceEntry" "PerformanceResourceTiming"];
          "PerformanceResourceTiming" = ["PerformanceEntry"];
          "PermissionStatus" = ["EventTarget"];
          "PointerEvent" = ["Event" "MouseEvent" "UiEvent"];
          "PopStateEvent" = ["Event"];
          "PopupBlockedEvent" = ["Event"];
          "PresentationAvailability" = ["EventTarget"];
          "PresentationConnection" = ["EventTarget"];
          "PresentationConnectionAvailableEvent" = ["Event"];
          "PresentationConnectionCloseEvent" = ["Event"];
          "PresentationConnectionList" = ["EventTarget"];
          "PresentationRequest" = ["EventTarget"];
          "ProcessingInstruction" = ["CharacterData" "EventTarget" "Node"];
          "ProgressEvent" = ["Event"];
          "PromiseRejectionEvent" = ["Event"];
          "PublicKeyCredential" = ["Credential"];
          "PushEvent" = ["Event" "ExtendableEvent"];
          "RadioNodeList" = ["NodeList"];
          "RtcDataChannel" = ["EventTarget"];
          "RtcDataChannelEvent" = ["Event"];
          "RtcPeerConnection" = ["EventTarget"];
          "RtcPeerConnectionIceEvent" = ["Event"];
          "RtcTrackEvent" = ["Event"];
          "RtcdtmfSender" = ["EventTarget"];
          "RtcdtmfToneChangeEvent" = ["Event"];
          "Screen" = ["EventTarget"];
          "ScreenOrientation" = ["EventTarget"];
          "ScriptProcessorNode" = ["AudioNode" "EventTarget"];
          "ScrollAreaEvent" = ["Event" "UiEvent"];
          "SecurityPolicyViolationEvent" = ["Event"];
          "ServiceWorker" = ["EventTarget"];
          "ServiceWorkerContainer" = ["EventTarget"];
          "ServiceWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "ServiceWorkerRegistration" = ["EventTarget"];
          "ShadowRoot" = ["DocumentFragment" "EventTarget" "Node"];
          "SharedWorker" = ["EventTarget"];
          "SharedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "SourceBuffer" = ["EventTarget"];
          "SourceBufferList" = ["EventTarget"];
          "SpeechRecognition" = ["EventTarget"];
          "SpeechRecognitionError" = ["Event"];
          "SpeechRecognitionEvent" = ["Event"];
          "SpeechSynthesis" = ["EventTarget"];
          "SpeechSynthesisErrorEvent" = ["Event" "SpeechSynthesisEvent"];
          "SpeechSynthesisEvent" = ["Event"];
          "SpeechSynthesisUtterance" = ["EventTarget"];
          "StereoPannerNode" = ["AudioNode" "EventTarget"];
          "StorageEvent" = ["Event"];
          "SvgAnimateElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateMotionElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateTransformElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimationElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgCircleElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgClipPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgComponentTransferFunctionElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgDefsElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgDescElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgElement" = ["Element" "EventTarget" "Node"];
          "SvgEllipseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgFilterElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgForeignObjectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGeometryElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGradientElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgGraphicsElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgImageElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgLineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgLinearGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgMarkerElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMaskElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMetadataElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPathSegArcAbs" = ["SvgPathSeg"];
          "SvgPathSegArcRel" = ["SvgPathSeg"];
          "SvgPathSegClosePath" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalRel" = ["SvgPathSeg"];
          "SvgPathSegMovetoAbs" = ["SvgPathSeg"];
          "SvgPathSegMovetoRel" = ["SvgPathSeg"];
          "SvgPatternElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPolygonElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPolylineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgRadialGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgRectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgScriptElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSetElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgStopElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgStyleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSwitchElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgSymbolElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgTextContentElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgTextElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "SvgTextPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTextPositioningElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTitleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgUseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgViewElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgaElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgfeBlendElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeColorMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeComponentTransferElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeCompositeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeConvolveMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDiffuseLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDisplacementMapElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDistantLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDropShadowElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFloodElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFuncAElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncBElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncGElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncRElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeGaussianBlurElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeImageElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeNodeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMorphologyElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeOffsetElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfePointLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpecularLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpotLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTileElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTurbulenceElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvggElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgmPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgsvgElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgtSpanElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "TcpServerSocket" = ["EventTarget"];
          "TcpServerSocketEvent" = ["Event"];
          "TcpSocket" = ["EventTarget"];
          "TcpSocketErrorEvent" = ["Event"];
          "TcpSocketEvent" = ["Event"];
          "Text" = ["CharacterData" "EventTarget" "Node"];
          "TextTrack" = ["EventTarget"];
          "TextTrackCue" = ["EventTarget"];
          "TextTrackList" = ["EventTarget"];
          "TimeEvent" = ["Event"];
          "TouchEvent" = ["Event" "UiEvent"];
          "TrackEvent" = ["Event"];
          "TransitionEvent" = ["Event"];
          "UiEvent" = ["Event"];
          "Usb" = ["EventTarget"];
          "UsbConnectionEvent" = ["Event"];
          "UsbPermissionResult" = ["EventTarget" "PermissionStatus"];
          "UserProximityEvent" = ["Event"];
          "ValueEvent" = ["Event"];
          "VideoStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "VideoTrackList" = ["EventTarget"];
          "VrDisplay" = ["EventTarget"];
          "VttCue" = ["EventTarget" "TextTrackCue"];
          "WakeLockSentinel" = ["EventTarget"];
          "WaveShaperNode" = ["AudioNode" "EventTarget"];
          "WebGlContextEvent" = ["Event"];
          "WebKitCssMatrix" = ["DomMatrix" "DomMatrixReadOnly"];
          "WebSocket" = ["EventTarget"];
          "WheelEvent" = ["Event" "MouseEvent" "UiEvent"];
          "Window" = ["EventTarget"];
          "WindowClient" = ["Client"];
          "Worker" = ["EventTarget"];
          "WorkerDebuggerGlobalScope" = ["EventTarget"];
          "WorkerGlobalScope" = ["EventTarget"];
          "XmlDocument" = ["Document" "EventTarget" "Node"];
          "XmlHttpRequest" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "XmlHttpRequestEventTarget" = ["EventTarget"];
          "XmlHttpRequestUpload" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "Xr" = ["EventTarget"];
          "XrBoundedReferenceSpace" = ["EventTarget" "XrReferenceSpace" "XrSpace"];
          "XrInputSourceEvent" = ["Event"];
          "XrInputSourcesChangeEvent" = ["Event"];
          "XrReferenceSpace" = ["EventTarget" "XrSpace"];
          "XrReferenceSpaceEvent" = ["Event"];
          "XrSession" = ["EventTarget"];
          "XrSessionEvent" = ["Event"];
          "XrSpace" = ["EventTarget"];
          "XrViewerPose" = ["XrPose"];
        };
        resolvedDefaultFeatures = ["Crypto" "EventTarget" "Window"];
      };
      "web-view" = rec {
        crateName = "web-view";
        version = "0.7.3";
        edition = "2015";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src =
          if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion))
          then
            lib.cleanSourceWith {
              filter = sourceFilter;
              src = ./web-view;
            }
          else ./web-view;
        authors = [
          "Boscop"
          "zxey <r.hozak@seznam.cz>"
          "Sam Green <sam.green81@gmail.com>"
        ];
        dependencies = [
          {
            name = "boxfnonce";
            packageId = "boxfnonce";
          }
          {
            name = "tinyfiledialogs";
            packageId = "tinyfiledialogs";
          }
          {
            name = "urlencoding";
            packageId = "urlencoding";
          }
          {
            name = "webview-sys";
            packageId = "webview-sys";
          }
        ];
        features = {
          "edge" = ["webview-sys/edge"];
        };
      };
      "webkit2gtk" = rec {
        crateName = "webkit2gtk";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1a80afir4wl1f09n5wbiag6g5xv28avm2aidc4hzr0q8hxzppr73";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "gtk";
            packageId = "gtk";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
          {
            name = "javascriptcore-rs";
            packageId = "javascriptcore-rs";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "webkit2gtk-sys";
            packageId = "webkit2gtk-sys";
            rename = "ffi";
          }
        ];
        features = {
          "v2_10" = ["v2_8" "ffi/v2_10"];
          "v2_12" = ["v2_10" "ffi/v2_12"];
          "v2_14" = ["v2_12" "ffi/v2_14"];
          "v2_16" = ["v2_14" "ffi/v2_16"];
          "v2_18" = ["v2_16" "ffi/v2_18"];
          "v2_20" = ["v2_18" "ffi/v2_20"];
          "v2_22" = ["v2_20" "ffi/v2_22"];
          "v2_24" = ["v2_22" "ffi/v2_24"];
          "v2_26" = ["v2_24" "ffi/v2_26"];
          "v2_28" = ["v2_26" "ffi/v2_28"];
          "v2_30" = ["v2_28" "ffi/v2_30"];
          "v2_4" = ["v2_2"];
          "v2_6" = ["v2_4" "ffi/v2_6"];
          "v2_8" = ["v2_6" "ffi/v2_8"];
        };
        resolvedDefaultFeatures = ["v2_10" "v2_12" "v2_14" "v2_16" "v2_18" "v2_2" "v2_4" "v2_6" "v2_8"];
      };
      "webkit2gtk-sys" = rec {
        crateName = "webkit2gtk-sys";
        version = "0.14.0";
        edition = "2018";
        sha256 = "166sip1rw0qsfchjf29ghlrzppvx9vv5nsipj8xprpml1jgwqv5n";
        libName = "webkit2gtk_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
          {
            name = "javascriptcore-rs-sys";
            packageId = "javascriptcore-rs-sys 0.2.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
          {
            name = "soup-sys";
            packageId = "soup-sys";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "system-deps";
            packageId = "system-deps 3.2.0";
          }
        ];
        features = {
          "v2_10" = ["v2_8"];
          "v2_12" = ["v2_10"];
          "v2_14" = ["v2_12"];
          "v2_16" = ["v2_14"];
          "v2_18" = ["v2_16"];
          "v2_20" = ["v2_18"];
          "v2_22" = ["v2_20"];
          "v2_24" = ["v2_22"];
          "v2_26" = ["v2_24"];
          "v2_28" = ["v2_26"];
          "v2_30" = ["v2_28"];
          "v2_8" = ["v2_6"];
        };
        resolvedDefaultFeatures = ["v2_10" "v2_12" "v2_14" "v2_16" "v2_18" "v2_6" "v2_8"];
      };
      "webpki" = rec {
        crateName = "webpki";
        version = "0.22.0";
        edition = "2018";
        sha256 = "1gd1gxip5kgdwmrvhj5gjxij2mgg2mavq1ych4q1h272ja0xg5gh";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = ["ring/alloc"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "webpki-roots" = rec {
        crateName = "webpki-roots";
        version = "0.22.1";
        edition = "2018";
        crateBin = [];
        sha256 = "0c56xd3sk82grjnm7272hp0lpjq4xhvkl13sf52r68a7dxn7hxf4";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "webpki";
            packageId = "webpki";
          }
        ];
      };
      "webview-sys" = rec {
        crateName = "webview-sys";
        version = "0.6.2";
        edition = "2018";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src =
          if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion))
          then
            lib.cleanSourceWith {
              filter = sourceFilter;
              src = ./web-view/webview-sys;
            }
          else ./web-view/webview-sys;
        libName = "webview_sys";
        libPath = "lib.rs";
        authors = [
          "Boscop"
          "zxey <r.hozak@seznam.cz>"
        ];
        dependencies = [
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "gio-sys";
            packageId = "gio-sys 0.14.0";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "glib-sys";
            packageId = "glib-sys 0.14.0";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys 0.14.0";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "javascriptcore-rs-sys";
            packageId = "javascriptcore-rs-sys 0.3.3";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
          }
          {
            name = "webkit2gtk-sys";
            packageId = "webkit2gtk-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "unix" target."family") && (!("macos" == target."os")));
            features = ["v2_8"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
      };
      "webview2" = rec {
        crateName = "webview2";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0cah7n399lpffx0amzwy21x194hm4sxl1zkvikmgm0wwxnqgcfr8";
        authors = [
          "Yin Guanhao <sopium@mysterious.site>"
        ];
        dependencies = [
          {
            name = "com";
            packageId = "com";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "webview2-sys";
            packageId = "webview2-sys";
          }
          {
            name = "widestring";
            packageId = "widestring 0.5.1";
          }
          {
            name = "winapi";
            packageId = "winapi";
            features = ["combaseapi" "shellapi" "winerror"];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = ["libloaderapi"];
          }
        ];
      };
      "webview2-sys" = rec {
        crateName = "webview2-sys";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0k1a06w5jrajw3yvhf1ca5b5xa0krvinnda6fc6wbi1si6g8idr4";
        authors = [
          "Yin Guanhao <sopium@mysterious.site>"
        ];
        dependencies = [
          {
            name = "com";
            packageId = "com";
          }
          {
            name = "winapi";
            packageId = "winapi";
            features = ["combaseapi" "winver" "shellapi"];
          }
        ];
      };
      "wepoll-ffi" = rec {
        crateName = "wepoll-ffi";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1yxpkva08d5f6ih3b5hdb8h45mkz3jq3dh1bzjspfhy6qpnzshyp";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["null-overlapped-wakeups-patch"];
      };
      "which" = rec {
        crateName = "which";
        version = "3.1.1";
        edition = "2015";
        sha256 = "094pw9pi48szshn9ln69z2kg7syq1jp80h5ps1qncbsaw4d0f4fh";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = ["failure"];
          "failure" = ["dep:failure"];
        };
        resolvedDefaultFeatures = ["default" "failure"];
      };
      "widestring 0.4.3" = rec {
        crateName = "widestring";
        version = "0.4.3";
        edition = "2015";
        sha256 = "0z3ba8qrxb62vpfgk7n2xs2grm9kdaj1cz4q8s0gs8fx8h0r8s61";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "widestring 0.5.1" = rec {
        crateName = "widestring";
        version = "0.5.1";
        edition = "2018";
        sha256 = "10qrilijh1qzw362mvd4nsz3vv32dxx530vk41hkcx8hah22z20p";
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = ["impl-debug"];
        };
        resolvedDefaultFeatures = ["combaseapi" "commctrl" "dwmapi" "errhandlingapi" "handleapi" "hidusage" "imm" "impl-debug" "impl-default" "ioapiset" "knownfolders" "libloaderapi" "minwinbase" "minwindef" "ntdef" "ntsecapi" "ntstatus" "objbase" "ole2" "oleidl" "processthreadsapi" "profileapi" "shellapi" "shellscalingapi" "shlobj" "shobjidl_core" "std" "synchapi" "sysinfoapi" "timezoneapi" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnls" "winnt" "winreg" "winsock2" "winuser" "winver" "ws2def" "ws2ipdef" "ws2tcpip" "wtypesbase"];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "windows" = rec {
        crateName = "windows";
        version = "0.24.0";
        edition = "2018";
        sha256 = "0i1ry526a8nrs3fikgl99yinlqqinjlfhzxcq1rb12hcmr2r7wx9";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = {
              target,
              features,
            }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-msvc");
          }
        ];
        features = {
          "AI_MachineLearning" = ["AI"];
          "AI_MachineLearning_Preview" = ["AI_MachineLearning"];
          "ApplicationModel_Activation" = ["ApplicationModel"];
          "ApplicationModel_AppExtensions" = ["ApplicationModel"];
          "ApplicationModel_AppService" = ["ApplicationModel"];
          "ApplicationModel_Appointments" = ["ApplicationModel"];
          "ApplicationModel_Appointments_AppointmentsProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Appointments_DataProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Background" = ["ApplicationModel"];
          "ApplicationModel_Calls" = ["ApplicationModel"];
          "ApplicationModel_Calls_Background" = ["ApplicationModel_Calls"];
          "ApplicationModel_Calls_Provider" = ["ApplicationModel_Calls"];
          "ApplicationModel_Chat" = ["ApplicationModel"];
          "ApplicationModel_CommunicationBlocking" = ["ApplicationModel"];
          "ApplicationModel_Contacts" = ["ApplicationModel"];
          "ApplicationModel_Contacts_DataProvider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_Contacts_Provider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_ConversationalAgent" = ["ApplicationModel"];
          "ApplicationModel_Core" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer_DragDrop" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_DataTransfer_DragDrop_Core" = ["ApplicationModel_DataTransfer_DragDrop"];
          "ApplicationModel_DataTransfer_ShareTarget" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_Email" = ["ApplicationModel"];
          "ApplicationModel_Email_DataProvider" = ["ApplicationModel_Email"];
          "ApplicationModel_ExtendedExecution" = ["ApplicationModel"];
          "ApplicationModel_ExtendedExecution_Foreground" = ["ApplicationModel_ExtendedExecution"];
          "ApplicationModel_Holographic" = ["ApplicationModel"];
          "ApplicationModel_LockScreen" = ["ApplicationModel"];
          "ApplicationModel_Payments" = ["ApplicationModel"];
          "ApplicationModel_Payments_Provider" = ["ApplicationModel_Payments"];
          "ApplicationModel_Preview" = ["ApplicationModel"];
          "ApplicationModel_Preview_Holographic" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_InkWorkspace" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_Notes" = ["ApplicationModel_Preview"];
          "ApplicationModel_Resources" = ["ApplicationModel"];
          "ApplicationModel_Resources_Core" = ["ApplicationModel_Resources"];
          "ApplicationModel_Resources_Management" = ["ApplicationModel_Resources"];
          "ApplicationModel_Search" = ["ApplicationModel"];
          "ApplicationModel_Search_Core" = ["ApplicationModel_Search"];
          "ApplicationModel_SocialInfo" = ["ApplicationModel"];
          "ApplicationModel_SocialInfo_Provider" = ["ApplicationModel_SocialInfo"];
          "ApplicationModel_Store" = ["ApplicationModel"];
          "ApplicationModel_Store_LicenseManagement" = ["ApplicationModel_Store"];
          "ApplicationModel_Store_Preview" = ["ApplicationModel_Store"];
          "ApplicationModel_Store_Preview_InstallControl" = ["ApplicationModel_Store_Preview"];
          "ApplicationModel_UserActivities" = ["ApplicationModel"];
          "ApplicationModel_UserActivities_Core" = ["ApplicationModel_UserActivities"];
          "ApplicationModel_UserDataAccounts" = ["ApplicationModel"];
          "ApplicationModel_UserDataAccounts_Provider" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataAccounts_SystemAccess" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataTasks" = ["ApplicationModel"];
          "ApplicationModel_UserDataTasks_DataProvider" = ["ApplicationModel_UserDataTasks"];
          "ApplicationModel_VoiceCommands" = ["ApplicationModel"];
          "ApplicationModel_Wallet" = ["ApplicationModel"];
          "ApplicationModel_Wallet_System" = ["ApplicationModel_Wallet"];
          "Data_Html" = ["Data"];
          "Data_Json" = ["Data"];
          "Data_Pdf" = ["Data"];
          "Data_Text" = ["Data"];
          "Data_Xml" = ["Data"];
          "Data_Xml_Dom" = ["Data_Xml"];
          "Data_Xml_Xsl" = ["Data_Xml"];
          "Devices_Adc" = ["Devices"];
          "Devices_Adc_Provider" = ["Devices_Adc"];
          "Devices_AllJoyn" = ["Devices"];
          "Devices_Background" = ["Devices"];
          "Devices_Bluetooth" = ["Devices"];
          "Devices_Bluetooth_Advertisement" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Background" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_GenericAttributeProfile" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Rfcomm" = ["Devices_Bluetooth"];
          "Devices_Custom" = ["Devices"];
          "Devices_Display" = ["Devices"];
          "Devices_Display_Core" = ["Devices_Display"];
          "Devices_Enumeration" = ["Devices"];
          "Devices_Enumeration_Pnp" = ["Devices_Enumeration"];
          "Devices_Geolocation" = ["Devices"];
          "Devices_Geolocation_Geofencing" = ["Devices_Geolocation"];
          "Devices_Gpio" = ["Devices"];
          "Devices_Gpio_Provider" = ["Devices_Gpio"];
          "Devices_Haptics" = ["Devices"];
          "Devices_HumanInterfaceDevice" = ["Devices"];
          "Devices_I2c" = ["Devices"];
          "Devices_I2c_Provider" = ["Devices_I2c"];
          "Devices_Input" = ["Devices"];
          "Devices_Input_Preview" = ["Devices_Input"];
          "Devices_Lights" = ["Devices"];
          "Devices_Lights_Effects" = ["Devices_Lights"];
          "Devices_Midi" = ["Devices"];
          "Devices_Perception" = ["Devices"];
          "Devices_Perception_Provider" = ["Devices_Perception"];
          "Devices_PointOfService" = ["Devices"];
          "Devices_PointOfService_Provider" = ["Devices_PointOfService"];
          "Devices_Portable" = ["Devices"];
          "Devices_Power" = ["Devices"];
          "Devices_Printers" = ["Devices"];
          "Devices_Printers_Extensions" = ["Devices_Printers"];
          "Devices_Pwm" = ["Devices"];
          "Devices_Pwm_Provider" = ["Devices_Pwm"];
          "Devices_Radios" = ["Devices"];
          "Devices_Scanners" = ["Devices"];
          "Devices_Sensors" = ["Devices"];
          "Devices_Sensors_Custom" = ["Devices_Sensors"];
          "Devices_SerialCommunication" = ["Devices"];
          "Devices_SmartCards" = ["Devices"];
          "Devices_Sms" = ["Devices"];
          "Devices_Spi" = ["Devices"];
          "Devices_Spi_Provider" = ["Devices_Spi"];
          "Devices_Usb" = ["Devices"];
          "Devices_WiFi" = ["Devices"];
          "Devices_WiFiDirect" = ["Devices"];
          "Devices_WiFiDirect_Services" = ["Devices_WiFiDirect"];
          "Embedded_DeviceLockdown" = ["Embedded"];
          "Foundation_Collections" = ["Foundation"];
          "Foundation_Diagnostics" = ["Foundation"];
          "Foundation_Metadata" = ["Foundation"];
          "Foundation_Numerics" = ["Foundation"];
          "Gaming_Input" = ["Gaming"];
          "Gaming_Input_Custom" = ["Gaming_Input"];
          "Gaming_Input_ForceFeedback" = ["Gaming_Input"];
          "Gaming_Input_Preview" = ["Gaming_Input"];
          "Gaming_Preview" = ["Gaming"];
          "Gaming_Preview_GamesEnumeration" = ["Gaming_Preview"];
          "Gaming_UI" = ["Gaming"];
          "Gaming_XboxLive" = ["Gaming"];
          "Gaming_XboxLive_Storage" = ["Gaming_XboxLive"];
          "Globalization_Collation" = ["Globalization"];
          "Globalization_DateTimeFormatting" = ["Globalization"];
          "Globalization_Fonts" = ["Globalization"];
          "Globalization_NumberFormatting" = ["Globalization"];
          "Globalization_PhoneNumberFormatting" = ["Globalization"];
          "Graphics_Capture" = ["Graphics"];
          "Graphics_DirectX" = ["Graphics"];
          "Graphics_DirectX_Direct3D11" = ["Graphics_DirectX"];
          "Graphics_Display" = ["Graphics"];
          "Graphics_Display_Core" = ["Graphics_Display"];
          "Graphics_Effects" = ["Graphics"];
          "Graphics_Holographic" = ["Graphics"];
          "Graphics_Imaging" = ["Graphics"];
          "Graphics_Printing" = ["Graphics"];
          "Graphics_Printing3D" = ["Graphics"];
          "Graphics_Printing_OptionDetails" = ["Graphics_Printing"];
          "Graphics_Printing_PrintSupport" = ["Graphics_Printing"];
          "Graphics_Printing_PrintTicket" = ["Graphics_Printing"];
          "Graphics_Printing_Workflow" = ["Graphics_Printing"];
          "Management_Core" = ["Management"];
          "Management_Deployment" = ["Management"];
          "Management_Deployment_Preview" = ["Management_Deployment"];
          "Management_Policies" = ["Management"];
          "Management_Update" = ["Management"];
          "Management_Workplace" = ["Management"];
          "Media_AppBroadcasting" = ["Media"];
          "Media_AppRecording" = ["Media"];
          "Media_Audio" = ["Media"];
          "Media_Capture" = ["Media"];
          "Media_Capture_Core" = ["Media_Capture"];
          "Media_Capture_Frames" = ["Media_Capture"];
          "Media_Casting" = ["Media"];
          "Media_ClosedCaptioning" = ["Media"];
          "Media_ContentRestrictions" = ["Media"];
          "Media_Control" = ["Media"];
          "Media_Core" = ["Media"];
          "Media_Core_Preview" = ["Media_Core"];
          "Media_Devices" = ["Media"];
          "Media_Devices_Core" = ["Media_Devices"];
          "Media_DialProtocol" = ["Media"];
          "Media_Editing" = ["Media"];
          "Media_Effects" = ["Media"];
          "Media_FaceAnalysis" = ["Media"];
          "Media_Import" = ["Media"];
          "Media_MediaProperties" = ["Media"];
          "Media_Miracast" = ["Media"];
          "Media_Ocr" = ["Media"];
          "Media_PlayTo" = ["Media"];
          "Media_Playback" = ["Media"];
          "Media_Playlists" = ["Media"];
          "Media_Protection" = ["Media"];
          "Media_Protection_PlayReady" = ["Media_Protection"];
          "Media_Render" = ["Media"];
          "Media_SpeechRecognition" = ["Media"];
          "Media_SpeechSynthesis" = ["Media"];
          "Media_Streaming" = ["Media"];
          "Media_Streaming_Adaptive" = ["Media_Streaming"];
          "Media_Transcoding" = ["Media"];
          "Networking_BackgroundTransfer" = ["Networking"];
          "Networking_Connectivity" = ["Networking"];
          "Networking_NetworkOperators" = ["Networking"];
          "Networking_Proximity" = ["Networking"];
          "Networking_PushNotifications" = ["Networking"];
          "Networking_ServiceDiscovery" = ["Networking"];
          "Networking_ServiceDiscovery_Dnssd" = ["Networking_ServiceDiscovery"];
          "Networking_Sockets" = ["Networking"];
          "Networking_Vpn" = ["Networking"];
          "Networking_XboxLive" = ["Networking"];
          "Perception_Automation" = ["Perception"];
          "Perception_Automation_Core" = ["Perception_Automation"];
          "Perception_People" = ["Perception"];
          "Perception_Spatial" = ["Perception"];
          "Perception_Spatial_Preview" = ["Perception_Spatial"];
          "Perception_Spatial_Surfaces" = ["Perception_Spatial"];
          "Phone_ApplicationModel" = ["Phone"];
          "Phone_Devices" = ["Phone"];
          "Phone_Devices_Notification" = ["Phone_Devices"];
          "Phone_Devices_Power" = ["Phone_Devices"];
          "Phone_Management" = ["Phone"];
          "Phone_Management_Deployment" = ["Phone_Management"];
          "Phone_Media" = ["Phone"];
          "Phone_Media_Devices" = ["Phone_Media"];
          "Phone_Notification" = ["Phone"];
          "Phone_Notification_Management" = ["Phone_Notification"];
          "Phone_PersonalInformation" = ["Phone"];
          "Phone_PersonalInformation_Provisioning" = ["Phone_PersonalInformation"];
          "Phone_Speech" = ["Phone"];
          "Phone_Speech_Recognition" = ["Phone_Speech"];
          "Phone_StartScreen" = ["Phone"];
          "Phone_System" = ["Phone"];
          "Phone_System_Power" = ["Phone_System"];
          "Phone_System_Profile" = ["Phone_System"];
          "Phone_System_UserProfile" = ["Phone_System"];
          "Phone_System_UserProfile_GameServices" = ["Phone_System_UserProfile"];
          "Phone_System_UserProfile_GameServices_Core" = ["Phone_System_UserProfile_GameServices"];
          "Phone_UI" = ["Phone"];
          "Phone_UI_Input" = ["Phone_UI"];
          "Security_Authentication" = ["Security"];
          "Security_Authentication_Identity" = ["Security_Authentication"];
          "Security_Authentication_Identity_Core" = ["Security_Authentication_Identity"];
          "Security_Authentication_Identity_Provider" = ["Security_Authentication_Identity"];
          "Security_Authentication_OnlineId" = ["Security_Authentication"];
          "Security_Authentication_Web" = ["Security_Authentication"];
          "Security_Authentication_Web_Core" = ["Security_Authentication_Web"];
          "Security_Authentication_Web_Provider" = ["Security_Authentication_Web"];
          "Security_Authorization" = ["Security"];
          "Security_Authorization_AppCapabilityAccess" = ["Security_Authorization"];
          "Security_Credentials" = ["Security"];
          "Security_Credentials_UI" = ["Security_Credentials"];
          "Security_Cryptography" = ["Security"];
          "Security_Cryptography_Certificates" = ["Security_Cryptography"];
          "Security_Cryptography_Core" = ["Security_Cryptography"];
          "Security_Cryptography_DataProtection" = ["Security_Cryptography"];
          "Security_DataProtection" = ["Security"];
          "Security_EnterpriseData" = ["Security"];
          "Security_ExchangeActiveSyncProvisioning" = ["Security"];
          "Security_Isolation" = ["Security"];
          "Services_Cortana" = ["Services"];
          "Services_Maps" = ["Services"];
          "Services_Maps_Guidance" = ["Services_Maps"];
          "Services_Maps_LocalSearch" = ["Services_Maps"];
          "Services_Maps_OfflineMaps" = ["Services_Maps"];
          "Services_Store" = ["Services"];
          "Services_TargetedContent" = ["Services"];
          "Storage_AccessCache" = ["Storage"];
          "Storage_BulkAccess" = ["Storage"];
          "Storage_Compression" = ["Storage"];
          "Storage_FileProperties" = ["Storage"];
          "Storage_Pickers" = ["Storage"];
          "Storage_Pickers_Provider" = ["Storage_Pickers"];
          "Storage_Provider" = ["Storage"];
          "Storage_Search" = ["Storage"];
          "Storage_Streams" = ["Storage"];
          "System_Diagnostics" = ["System"];
          "System_Diagnostics_DevicePortal" = ["System_Diagnostics"];
          "System_Diagnostics_Telemetry" = ["System_Diagnostics"];
          "System_Diagnostics_TraceReporting" = ["System_Diagnostics"];
          "System_Display" = ["System"];
          "System_Implementation" = ["System"];
          "System_Implementation_FileExplorer" = ["System_Implementation"];
          "System_Inventory" = ["System"];
          "System_Power" = ["System"];
          "System_Power_Diagnostics" = ["System_Power"];
          "System_Preview" = ["System"];
          "System_Profile" = ["System"];
          "System_Profile_SystemManufacturers" = ["System_Profile"];
          "System_RemoteDesktop" = ["System"];
          "System_RemoteDesktop_Input" = ["System_RemoteDesktop"];
          "System_RemoteSystems" = ["System"];
          "System_Threading" = ["System"];
          "System_Threading_Core" = ["System_Threading"];
          "System_Update" = ["System"];
          "System_UserProfile" = ["System"];
          "UI_Accessibility" = ["UI"];
          "UI_ApplicationSettings" = ["UI"];
          "UI_Composition" = ["UI"];
          "UI_Composition_Core" = ["UI_Composition"];
          "UI_Composition_Desktop" = ["UI_Composition"];
          "UI_Composition_Diagnostics" = ["UI_Composition"];
          "UI_Composition_Effects" = ["UI_Composition"];
          "UI_Composition_Interactions" = ["UI_Composition"];
          "UI_Composition_Scenes" = ["UI_Composition"];
          "UI_Core" = ["UI"];
          "UI_Core_AnimationMetrics" = ["UI_Core"];
          "UI_Core_Preview" = ["UI_Core"];
          "UI_Input" = ["UI"];
          "UI_Input_Core" = ["UI_Input"];
          "UI_Input_Inking" = ["UI_Input"];
          "UI_Input_Inking_Analysis" = ["UI_Input_Inking"];
          "UI_Input_Inking_Core" = ["UI_Input_Inking"];
          "UI_Input_Inking_Preview" = ["UI_Input_Inking"];
          "UI_Input_Preview" = ["UI_Input"];
          "UI_Input_Preview_Injection" = ["UI_Input_Preview"];
          "UI_Input_Spatial" = ["UI_Input"];
          "UI_Notifications" = ["UI"];
          "UI_Notifications_Management" = ["UI_Notifications"];
          "UI_Popups" = ["UI"];
          "UI_Shell" = ["UI"];
          "UI_StartScreen" = ["UI"];
          "UI_Text" = ["UI"];
          "UI_Text_Core" = ["UI_Text"];
          "UI_UIAutomation" = ["UI"];
          "UI_UIAutomation_Core" = ["UI_UIAutomation"];
          "UI_ViewManagement" = ["UI"];
          "UI_ViewManagement_Core" = ["UI_ViewManagement"];
          "UI_WebUI" = ["UI"];
          "UI_WebUI_Core" = ["UI_WebUI"];
          "UI_WindowManagement" = ["UI"];
          "UI_WindowManagement_Preview" = ["UI_WindowManagement"];
          "UI_Xaml" = ["UI"];
          "UI_Xaml_Automation" = ["UI_Xaml"];
          "UI_Xaml_Automation_Peers" = ["UI_Xaml_Automation"];
          "UI_Xaml_Automation_Provider" = ["UI_Xaml_Automation"];
          "UI_Xaml_Automation_Text" = ["UI_Xaml_Automation"];
          "UI_Xaml_Controls" = ["UI_Xaml"];
          "UI_Xaml_Controls_Maps" = ["UI_Xaml_Controls"];
          "UI_Xaml_Controls_Primitives" = ["UI_Xaml_Controls"];
          "UI_Xaml_Core" = ["UI_Xaml"];
          "UI_Xaml_Core_Direct" = ["UI_Xaml_Core"];
          "UI_Xaml_Data" = ["UI_Xaml"];
          "UI_Xaml_Documents" = ["UI_Xaml"];
          "UI_Xaml_Hosting" = ["UI_Xaml"];
          "UI_Xaml_Input" = ["UI_Xaml"];
          "UI_Xaml_Interop" = ["UI_Xaml"];
          "UI_Xaml_Markup" = ["UI_Xaml"];
          "UI_Xaml_Media" = ["UI_Xaml"];
          "UI_Xaml_Media_Animation" = ["UI_Xaml_Media"];
          "UI_Xaml_Media_Imaging" = ["UI_Xaml_Media"];
          "UI_Xaml_Media_Media3D" = ["UI_Xaml_Media"];
          "UI_Xaml_Navigation" = ["UI_Xaml"];
          "UI_Xaml_Printing" = ["UI_Xaml"];
          "UI_Xaml_Resources" = ["UI_Xaml"];
          "UI_Xaml_Shapes" = ["UI_Xaml"];
          "Web_AtomPub" = ["Web"];
          "Web_Http" = ["Web"];
          "Web_Http_Diagnostics" = ["Web_Http"];
          "Web_Http_Filters" = ["Web_Http"];
          "Web_Http_Headers" = ["Web_Http"];
          "Web_Syndication" = ["Web"];
          "Web_UI" = ["Web"];
          "Web_UI_Interop" = ["Web_UI"];
          "Win32_AI" = ["Win32"];
          "Win32_AI_MachineLearning" = ["Win32_AI"];
          "Win32_AI_MachineLearning_DirectML" = ["Win32_AI_MachineLearning"];
          "Win32_AI_MachineLearning_WinML" = ["Win32_AI_MachineLearning"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_CompositionSwapchain" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D10" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9" = ["Win32_Graphics"];
          "Win32_Graphics_DirectComposition" = ["Win32_Graphics"];
          "Win32_Graphics_DirectDraw" = ["Win32_Graphics"];
          "Win32_Graphics_DirectManipulation" = ["Win32_Graphics"];
          "Win32_Graphics_DirectShow" = ["Win32_Graphics"];
          "Win32_Graphics_DirectWrite" = ["Win32_Graphics"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Interop" = ["Win32"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_CoreAudio" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaFoundation" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_PictureAcquisition" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_Ole_Automation" = ["Win32_System_Ole"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_PropertiesSystem" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_SideShow" = ["Win32_System"];
          "Win32_System_SqlLite" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_TransactionServer" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WinRT" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_DisplayDevices" = ["Win32_UI"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_UI_Xaml" = ["Win32_UI"];
          "Win32_UI_Xaml_Diagnostics" = ["Win32_UI_Xaml"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_MsHtml" = ["Win32_Web"];
          "build" = ["windows_gen" "windows_macros" "windows_reader"];
          "windows_gen" = ["dep:windows_gen"];
          "windows_macros" = ["dep:windows_macros"];
          "windows_reader" = ["dep:windows_reader"];
        };
        resolvedDefaultFeatures = ["Data" "Data_Xml" "Data_Xml_Dom" "Foundation" "Foundation_Collections" "UI" "UI_Notifications" "Win32" "Win32_Foundation" "Win32_System" "Win32_System_LibraryLoader" "Win32_System_SystemInformation" "default"];
      };
      "windows_i686_gnu" = rec {
        crateName = "windows_i686_gnu";
        version = "0.24.0";
        edition = "2018";
        sha256 = "1z810n1yafcmv14himqz9snfmr83pyxr0x077bbsxagclc86b1n0";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc" = rec {
        crateName = "windows_i686_msvc";
        version = "0.24.0";
        edition = "2018";
        sha256 = "1ilmbcklljd27bzjr7crb3mlisnfmqxaplkqj2i6k4vydgazw3xz";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.24.0";
        edition = "2018";
        sha256 = "1i4di3s8rh9yp43qqrp7q6lfamig9a3bd4r9b8h4902q60v1fjiq";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.24.0";
        edition = "2018";
        sha256 = "16fk46ri9pzfyg44gj35m6rl7i8jps89mmsrh4slcm6av1ig1n4v";
        authors = [
          "Microsoft"
        ];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.10.1";
        edition = "2015";
        sha256 = "17c6h02z88ijjba02bnxi5k94q5cz490nf3njh9yypf8fbig9l40";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = ["impl-default" "impl-debug" "minwindef" "minwinbase" "timezoneapi" "winerror" "winnt" "winreg" "handleapi"];
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "serde" = ["dep:serde"];
          "serialization-serde" = ["transactions" "serde"];
          "transactions" = ["winapi/ktmw32"];
        };
      };
      "winrt-notification" = rec {
        crateName = "winrt-notification";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0smyrjq0s141dmzl4mxwqx7ll8sgrbbi81qasprjajh3ivxh38gd";
        authors = [
          "allenbenz"
        ];
        dependencies = [
          {
            name = "strum";
            packageId = "strum 0.22.0";
            features = ["derive"];
          }
          {
            name = "windows";
            packageId = "windows";
            target = {
              target,
              features,
            }: ("gnu" == target."env");
            features = ["Win32_Foundation" "Foundation_Collections" "Win32_System_SystemInformation" "Win32_System_LibraryLoader" "Data_Xml_Dom" "UI_Notifications"];
          }
          {
            name = "windows";
            packageId = "windows";
            target = {
              target,
              features,
            }: ("msvc" == target."env");
            features = ["Win32_Foundation" "Foundation_Collections" "Win32_System_SystemInformation" "Data_Xml_Dom" "UI_Notifications"];
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
      };
      "wry" = rec {
        crateName = "wry";
        version = "0.12.2";
        edition = "2018";
        sha256 = "058rnrcam12j9v0g29cvcbyzkv4fgwkb1avp68qba5rr78wlk58g";
        authors = [
          "Tauri Programme within The Commons Conservancy"
        ];
        dependencies = [
          {
            name = "cocoa";
            packageId = "cocoa";
            target = {
              target,
              features,
            }: (("ios" == target."os") || ("macos" == target."os"));
          }
          {
            name = "core-graphics";
            packageId = "core-graphics 0.22.3";
            target = {
              target,
              features,
            }: (("ios" == target."os") || ("macos" == target."os"));
          }
          {
            name = "gdk";
            packageId = "gdk";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "gio";
            packageId = "gio";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "glib";
            packageId = "glib";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "gtk";
            packageId = "gtk";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            target = {
              target,
              features,
            }: (("ios" == target."os") || ("macos" == target."os"));
          }
          {
            name = "objc_id";
            packageId = "objc_id";
            target = {
              target,
              features,
            }: (("ios" == target."os") || ("macos" == target."os"));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tao";
            packageId = "tao";
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webkit2gtk";
            packageId = "webkit2gtk";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
            features = ["v2_18"];
          }
          {
            name = "webkit2gtk-sys";
            packageId = "webkit2gtk-sys";
            target = {
              target,
              features,
            }: (("linux" == target."os") || ("dragonfly" == target."os") || ("freebsd" == target."os") || ("openbsd" == target."os") || ("netbsd" == target."os"));
          }
          {
            name = "webview2";
            packageId = "webview2";
            target = {
              target,
              features,
            }: ("windows" == target."os");
          }
          {
            name = "webview2-sys";
            packageId = "webview2-sys";
            target = {
              target,
              features,
            }: ("windows" == target."os");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: ("windows" == target."os");
            features = ["libloaderapi" "oleidl"];
          }
        ];
        features = {
          "default" = ["file-drop" "protocol" "tray"];
          "dox" = ["tao/dox"];
          "tray" = ["tao/tray"];
        };
        resolvedDefaultFeatures = ["default" "file-drop" "protocol" "tray"];
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.19.1";
        edition = "2018";
        sha256 = "0ncc0f0cm6b0zylgl6saw5m7r8z50720nfhgkmfny6p89imr49pa";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.4";
        edition = "2015";
        crateBin = [];
        sha256 = "18q048wk3jafgl59sa2m0qv4vk2sqkfcya4kznc5rxqkhsad7myj";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];
      };
      "zbus" = rec {
        crateName = "zbus";
        version = "1.9.1";
        edition = "2018";
        sha256 = "1bcx5vf75iscgfdn3pszkbr6n20pvddry24lnws4xb53g71sq9i3";
        authors = [
          "Zeeshan Ali <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            features = ["serde"];
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "nb-connect";
            packageId = "nb-connect";
          }
          {
            name = "nix";
            packageId = "nix 0.17.0";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "polling";
            packageId = "polling";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "zbus_macros";
            packageId = "zbus_macros";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            usesDefaultFeatures = false;
            features = ["enumflags2"];
          }
        ];
        features = {
          "serde-xml-rs" = ["dep:serde-xml-rs"];
          "xml" = ["serde-xml-rs"];
        };
      };
      "zbus_macros" = rec {
        crateName = "zbus_macros";
        version = "1.9.1";
        edition = "2018";
        sha256 = "14sziniysx55501jq1fiimg93c3d8hydpdcjkfw831p455hcb0m4";
        procMacro = true;
        authors = [
          "Marc-André Lureau <marcandre.lureau@redhat.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 0.1.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["extra-traits" "full"];
          }
        ];
      };
      "zerotier_desktop_ui" = rec {
        crateName = "zerotier_desktop_ui";
        version = "1.8.4";
        edition = "2018";
        crateBin = [
          {
            name = "zerotier_desktop_ui";
            path = "src/main.rs";
            requiredFeatures = [];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src =
          if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion))
          then
            lib.cleanSourceWith {
              filter = sourceFilter;
              src = ./.;
            }
          else ./.;
        authors = [
          "Adam Ierymenko <adam.ierymenko@zerotier.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "crc64";
            packageId = "crc64";
          }
          {
            name = "notify-rust";
            packageId = "notify-rust";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "plist";
            packageId = "plist";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "runas";
            packageId = "runas";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "single-instance";
            packageId = "single-instance";
          }
          {
            name = "ureq";
            packageId = "ureq";
          }
          {
            name = "web-view";
            packageId = "web-view";
            target = {
              target,
              features,
            }: ("macos" == target."os");
          }
          {
            name = "winreg";
            packageId = "winreg";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "wry";
            packageId = "wry";
          }
        ];
      };
      "zvariant" = rec {
        crateName = "zvariant";
        version = "2.9.0";
        edition = "2018";
        sha256 = "04wrvnly04xv0qa7ac7incdamrhpi69g562prw668kfqx8ykgag1";
        authors = [
          "Zeeshan Ali <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            optional = true;
            features = ["serde"];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive";
          }
        ];
        features = {
          "arrayvec" = ["dep:arrayvec"];
          "default" = ["gvariant"];
          "enumflags2" = ["dep:enumflags2"];
          "ostree-tests" = ["gvariant"];
          "serde_bytes" = ["dep:serde_bytes"];
        };
        resolvedDefaultFeatures = ["default" "enumflags2" "gvariant"];
      };
      "zvariant_derive" = rec {
        crateName = "zvariant_derive";
        version = "2.9.0";
        edition = "2018";
        sha256 = "18sg3xpmw7m4dpqkayhcfwlgy1vrzycbw3995mcfqiw7x3h73vj6";
        procMacro = true;
        authors = [
          "Zeeshan Ali <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.1.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = ["extra-traits" "full"];
          }
        ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
     Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      /*
       We are choosing an arbitrary rust version to grab `lib` from,
      which is unfortunate, but `lib` has been version-agnostic the
      whole time so this is good enough for now.
      */
      os = pkgs.rust.lib.toTargetOs platform;
      arch = pkgs.rust.lib.toTargetArch platform;
      family = pkgs.rust.lib.toTargetFamily platform;
      env = "gnu";
      endian =
        if platform.parsed.cpu.significantByte.name == "littleEndian"
        then "little"
        else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      vendor = platform.parsed.vendor.name;
      debug_assertions = false;
    };

    /*
    Filters common temp files and build files.
    */
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type: let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName
        == ".gitignore"
        || (type == "directory" && baseName == ".git")
        # Filter out build results
        || (
          type
          == "directory"
          && (
            baseName
            == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )
        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )
        # Filter out IDE config
        || (
          type
          == "directory"
          && (
            baseName == ".idea" || baseName == ".vscode"
          )
        )
        || lib.hasSuffix ".iml" baseName
        # Filter out nix build files
        || baseName == "Cargo.nix"
        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

    /*
     Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
    */
    crateWithTest = {
      crate,
      testCrate,
      testCrateFlags,
      testInputs,
      testPreRun,
      testPostRun,
    }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string"; let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test = let
          drv =
            testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand =
            pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
          pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
            set -e

            export RUST_BACKTRACE=1

            # recreate a file hierarchy as when running tests with cargo

            # the source for test data
            ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

            # build outputs
            testRoot=target/debug
            mkdir -p $testRoot

            # executables of the crate
            # we copy to prevent std::env::current_exe() to resolve to a store location
            for i in ${crate}/bin/*; do
              cp "$i" "$testRoot"
            done
            chmod +w -R .

            # test harness executables are suffixed with a hash, like cargo does
            # this allows to prevent name collision with the main
            # executables of the crate
            hash=$(basename $out)
            for file in ${drv}/tests/*; do
              f=$testRoot/$(basename $file)-$hash
              cp $file $f
              ${testCommand}
            done
          '';
      in
        pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru =
            (crate.passthru or {})
            // {
              inherit test;
            };
        } ''
          echo tested by ${test}
          ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
        '';

    /*
    A restricted overridable version of builtRustCratesWithFeatures.
    */
    buildRustCrateWithFeatures = {
      packageId,
      features ? rootFeatures,
      crateOverrides ? defaultCrateOverrides,
      buildRustCrateForPkgsFunc ? null,
      runTests ? false,
      testCrateFlags ? [],
      testInputs ? [],
      # Any command to run immediatelly before a test is executed.
      testPreRun ? "",
      # Any command run immediatelly after a test is executed.
      testPostRun ? "",
    }:
      lib.makeOverridable
      (
        {
          features,
          crateOverrides,
          runTests,
          testCrateFlags,
          testInputs,
          testPreRun,
          testPostRun,
        }: let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests
            then
              crateWithTest
              {
                crate = drv;
                testCrate = testDrv;
                inherit testCrateFlags testInputs testPreRun testPostRun;
              }
            else drv;
        in
          derivation
      )
      {inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun;};

    /*
     Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
    */
    builtRustCratesWithFeatures = {
      packageId,
      features,
      crateConfigs ? crates,
      buildRustCrateForPkgsFunc,
      runTests,
      makeTarget ? makeDefaultTarget,
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests); let
        rootPackageId = packageId;
        mergedFeatures =
          mergePackageFeatures
          (
            args
            // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // {test = runTests;};
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs: let
          self = {
            crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
            target = makeTarget pkgs.stdenv.hostPlatform;
            build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
          };
        in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId: let
          features = mergedFeatures."${packageId}" or [];
          crateConfig' = crateConfigs."${packageId}";
          crateConfig =
            builtins.removeAttrs crateConfig' ["resolvedDefaultFeatures" "devDependencies"];
          devDependencies =
            lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig'.devDependencies or []);
          dependencies = dependencyDerivations {
            inherit features;
            inherit (self) target;
            buildByPackageId = depPackageId:
            # proc_macro crates must be compiled for the build architecture
              if crateConfigs.${depPackageId}.procMacro or false
              then self.build.crates.${depPackageId}
              else self.crates.${depPackageId};
            dependencies =
              (crateConfig.dependencies or [])
              ++ devDependencies;
          };
          buildDependencies = dependencyDerivations {
            inherit features;
            inherit (self.build) target;
            buildByPackageId = depPackageId:
              self.build.crates.${depPackageId};
            dependencies = crateConfig.buildDependencies or [];
          };
          dependenciesWithRenames = let
            buildDeps = filterEnabledDependencies {
              inherit features;
              inherit (self) target;
              dependencies = crateConfig.dependencies or [] ++ devDependencies;
            };
            hostDeps = filterEnabledDependencies {
              inherit features;
              inherit (self.build) target;
              dependencies = crateConfig.buildDependencies or [];
            };
          in
            lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
          # Crate renames have the form:
          #
          # {
          #    crate_name = [
          #       { version = "1.2.3"; rename = "crate_name01"; }
          #    ];
          #    # ...
          # }
          crateRenames = let
            grouped =
              lib.groupBy
              (dependency: dependency.name)
              dependenciesWithRenames;
            versionAndRename = dep: let
              package = crateConfigs."${dep.packageId}";
            in {
              inherit (dep) rename;
              version = package.version;
            };
          in
            lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
        in
          buildRustCrateForPkgsFunc pkgs
          (
            crateConfig
            // {
              # https://github.com/NixOS/nixpkgs/issues/218712
              dontStrip = stdenv.hostPlatform.isDarwin;
              src =
                crateConfig.src
                or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
              extraRustcOpts = lib.lists.optional (targetFeatures != []) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit features dependencies buildDependencies crateRenames release;
            }
          );
      in
        builtByPackageIdByPkgs;

    /*
    Returns the actual derivations for the given dependencies.
    */
    dependencyDerivations = {
      buildByPackageId,
      features,
      dependencies,
      target,
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target); let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
        map depDerivation enabledDependencies;

    /*
     Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
    */
    sanitizeForJson = val:
      if builtins.isAttrs val
      then lib.mapAttrs (n: v: sanitizeForJson v) val
      else if builtins.isList val
      then builtins.map sanitizeForJson val
      else if builtins.isFunction val
      then "function"
      else val;

    /*
    Returns various tools to debug a crate.
    */
    debugCrate = {
      packageId,
      target ? makeDefaultTarget stdenv.hostPlatform,
    }:
      assert (builtins.isString packageId); let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree =
            sanitizeForJson
            (
              buildRustCrateWithFeatures {
                buildRustCrateForPkgsFunc = _: crate: {
                  "01_crateName" = crate.crateName or false;
                  "02_features" = crate.features or [];
                  "03_dependencies" = crate.dependencies or [];
                };
                inherit packageId;
              }
            );
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in {internal = debug;};

    /*
     Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures = {
      crateConfigs ? crates,
      packageId,
      target,
    }:
      assert (builtins.isAttrs crateConfigs); let
        prefixValues = prefix: lib.mapAttrs (n: v: {"${prefix}" = v;});
        mergedFeatures =
          prefixValues
          "crate2nix"
          (mergePackageFeatures {
            inherit crateConfigs packageId target;
            features = ["default"];
          });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [mergedFeatures configs];
        onlyInCargo =
          builtins.attrNames
          (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
          (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures =
          lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

    /*
     Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures = {
      crateConfigs ? crates,
      packageId,
      rootPackageId ? packageId,
      features ? rootFeatures,
      dependencyPath ? [crates.${packageId}.crateName],
      featuresByPackageId ? {},
      target,
      # Adds devDependencies to the crate with rootPackageId.
      runTests ? false,
      ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests); let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or []) expandedFeatures;
        depWithResolvedFeatures = dependency: let
          packageId = dependency.packageId;
          features = dependencyFeatures enabledFeatures dependency;
        in {inherit packageId features;};
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies); let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
            (
              cache: {
                packageId,
                features,
              }: let
                cacheFeatures = cache.${packageId} or [];
                combinedFeatures = sortedUnique (cacheFeatures ++ features);
              in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf = let
          cacheFeatures = featuresByPackageId.${packageId} or [];
          combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
        in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
          (
            crateConfig.dependencies
            or []
            ++ lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig.devDependencies or [])
          );
        cacheWithAll =
          resolveDependencies
          cacheWithDependencies "build"
          (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

    /*
    Returns the enabled dependencies given the enabled features.
    */
    filterEnabledDependencies = {
      dependencies,
      features,
      target,
    }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
        lib.filter
        (
          dep: let
            targetFunc = dep.target or (features: true);
          in
            targetFunc {inherit features target;}
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
        )
        dependencies;

    /*
    Returns whether the given feature should enable the given dependency.
    */
    doesFeatureEnableDependency = dependency: feature: let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
     Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
    */
    expandFeatures = featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures); let
        expandFeaturesNoCycle = oldSeen: inputFeatures:
          if inputFeatures != []
          then let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // {${feature} = 1;};
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or []);
          in
            [feature] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else [];
        outFeatures = expandFeaturesNoCycle {} inputFeatures;
      in
        sortedUnique outFeatures;

    /*
     This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures = dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies); let
        additionalFeatures =
          lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency); let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
                if (dependency.optional or false) && enabled
                then [(dependency.rename or dependency.name)]
                else []
          )
          dependencies;
      in
        sortedUnique (features ++ additionalFeatures);

    /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
    */
    dependencyFeatures = features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency); let
        defaultOrNil =
          if dependency.usesDefaultFeatures or true
          then ["default"]
          else [];
        explicitFeatures = dependency.features or [];
        additionalDependencyFeatures = let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature:
            lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
          dependencyFeatures;
      in
        defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    /*
    Sorts and removes duplicates from a list of strings.
    */
    sortedUnique = features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features); let
        outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;}) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
        builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning = message: value:
      if strictDeprecation
      then builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
