{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.apps.netdata;
  cfgServer = cfg.server;

  guid = "059640A0-AB30-4DA2-AE4D-1AE21B5CF71D";
  server = "silver-star.ling-lizard.ts.net:19999";
in {
  options.apps.netdata = {
    enable =
      lib.mkEnableOption "netdata"
      // {
        default = true;
      };

    server.enable = lib.mkEnableOption "netdata server";
  };

  config = lib.mkIf cfg.enable {
    age.secrets = {
      netdata = {
        rekeyFile = ../../secrets/netdata.age;
        mode = "644";
      };
      netdata-stream-conf = {
        rekeyFile = ./stream.conf.age;
      };
    };

    security.sudo = {
      extraRules = [
        # netdata ALL=(root) NOPASSWORD: nvme
        {
          commands = [
            {
              command = "${pkgs.nvme-cli}/bin/nvme";
              options = ["NOPASSWD"];
            }
          ];
          users = [
            "netdata"
            "tomas"
          ];
        }
      ];
    };

    services.netdata = {
      enable = true;

      package = pkgs.netdataCloud;

      claimTokenFile = config.age.secrets."netdata".path;

      python.enable = true;

      config = {
        db = {
          mode =
            if cfgServer.enable
            then "dbengine"
            else "ram";
          "storage tiers" =
            if cfgServer.enable
            then 5
            else 3;
        };

        registry =
          if cfgServer.enable
          then {
            enabled = "yes";
            "registry to announce" = server;
          }
          else {
            enabled = "no";
            "registry to announce" = server;
          };

        web = {
          # Allow only localhost connections
          "allow connections from" = "localhost 100.* *.ling-lizard.ts.net";

          # "ssl key" = config.proxy-services.crt.key;
          # "ssl certificate" = config.proxy-services.crt.crt;
        };
      };

      configDir = {
        "stream.conf" = pkgs.writeText "stream.conf" (
          if cfgServer.enable
          then ''
            [${guid}]
            # Accept metrics streaming from other Agents with the specified API key
            enabled = yes
          ''
          else ''
            [stream]
            # Stream metrics to another Netdata
            enabled = yes
            # The IP and PORT of the parent
            destination = ${server} #:SSL
            # The shared API key, generated by uuidgen
            api key = ${guid}
          ''
        );
        "health_alarm_notify.conf" = pkgs.writeText "health_alarm_notify.conf" ''
          SEND_NTFY="YES"
          DEFAULT_RECIPIENT_NTFY="https://ntfy.sh/tomasharkema-nixos"
        '';
        "go.d/docker.conf" = pkgs.writeText "docker.conf" ''
          jobs:
            - name: local
              address: 'unix:///var/run/docker.sock'
        '';
        "go.d/systemdunits.conf" = pkgs.writeText "systemdunits.conf" ''
          jobs:
          - name: service-units
            include:
              - '*.service'
        '';
      };
    };
  };
}
