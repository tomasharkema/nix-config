{ inputs
, config
, pkgs
, lib
, hostname
, ...
} @ attrs:
let
  inherit (pkgs) stdenv;

  tmux-menu = pkgs.writeShellScriptBin "tmux-menu" ''
    # Get a list of existing tmux sessions:
    TMUX_SESSIONS=$(tmux ls | awk -F: '{print $1}')

    # If there are no existing sessions:
    if [[ -z $TMUX_SESSIONS ]]; then
        echo "No existing tmux sessions. Creating a new session called 'default'..."
        tmux new -s default
    else
        # Present a menu to the user:
        echo "Existing tmux sessions:"
        echo "$TMUX_SESSIONS"
        echo "Enter the name of the session you want to attach to, or 'new' to create a new session: "
        read user_input

        # Attach to the chosen session, or create a new one:
        if [[ $user_input == "new" ]]; then
            echo "Enter name for new session: "
            read new_session_name
            tmux new -s $new_session_name
        else
            tmux attach -t $user_input
        fi
    fi
  '';

in
{
  # nix.settings = {
  #   extra-experimental-features = "nix-command flakes";
  #   # distributedBuilds = true;
  #   trusted-users = [ "root" "tomas" ];
  #   extra-substituters = [
  #     # "ssh://nix-ssh@tower.ling-lizard.ts.net"
  #     "https://nix-cache.harke.ma/"
  #     "https://tomasharkema.cachix.org/"
  #     "https://cache.nixos.org/"
  #   ];
  #   extra-binary-caches = [
  #     "https://nix-cache.harke.ma/"
  #     "https://tomasharkema.cachix.org/"
  #     "https://cache.nixos.org/"
  #   ];
  #   extra-trusted-public-keys = [
  #     "tower.ling-lizard.ts.net:MBxJ2O32x6IcWJadxdP42YGVw2eW2tAbMp85Ws6QCno="
  #     "tomasharkema.cachix.org-1:LOeGvH7jlA3vZmW9+gHyw0BDd1C8a0xrQSl9WHHTRuA="
  #   ];
  #   access-tokens = [ "github.com=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" ];
  # };

  imports = [
    ./apps/nvim
    ./apps/atuin
    ./build-scripts.nix
    ./apps/tmux
  ]; # ++ [ (lib.optional (stdenv.isLinux) (./apps/flatpak.nix)) ];
  # self.home-manager.backupFileExtension = "bak";
  home.packages =
    (import ./packages/common.nix attrs)
    ++ [ (pkgs.nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" ]; }) ]
    ++ (import ./apps/statix { inherit pkgs; })
    ++ [
      pkgs.nixd
    ];
  home.username = lib.mkDefault "tomas";
  home.homeDirectory = lib.mkDefault "/home/tomas";

  home.stateVersion = "23.11";

  home.sessionVariables = lib.mkIf stdenv.isDarwin {
    EDITOR = "subl";
    SSH_AUTH_SOCK = "/Users/tomas/.1password/agent.sock";
  };

  nixpkgs.config.allowUnfreePredicate = _: true;
  nixpkgs.config.allowUnfree = true;

  programs.direnv.enable = true;
  programs.direnv.nix-direnv.enable = true;

  programs.htop.enable = true;
  programs.htop.settings.show_program_path = false;

  programs.fzf.enable = true;
  programs.nix-index.enable = true;

  programs.tmux = { enable = true; };

  programs.starship = {
    enable = true;
    enableZshIntegration = true;
    settings = {
      gcloud.disabled = true;
      nix_shell.disabled = false;

      hostname.disabled = false;

      # battery = {
      #   full_symbol = "üîã ";
      #   charging_symbol = "‚ö°Ô∏è ";
      #   discharging_symbol = "üíÄ ";
      # };

      sudo.disabled = false;
      shell.disabled = false;
      os.disabled = false;
    };
  };

  # Google Compute Engine Section
  # 
  # The following has been auto-generated by "gcloud compute config-ssh"
  # to make accessing your Google Compute Engine virtual machines easier.
  # 
  # To remove this blob, run:
  # 
  # gcloud compute config-ssh --remove
  # 
  # You can also manually remove this blob by deleting everything from
  # here until the comment that contains the string "End of Google Compute
  # Engine Section".
  # 
  # You should not hand-edit this section, unless you are deleting it.
  # Host utm-nixos
  # 	User tomas
  # 	HostName utm-nixos
  # 	ForwardAgent yes

  # Host unraidferdorie
  # 	User tomas
  # 	HostName unraidferdorie
  # 	ForwardAgent yes

  # # /Applications/Setapp
  # Host cfserve
  # 	User tomas
  # 	HostName cfserve
  # 	ForwardAgent yes

  # Host supermicro
  # 	User tomas
  # 	HostName supermicro
  # 	ForwardAgent yes
  # 	RequestTTY yes

  # Host raspbii
  # 	User tomas
  # 	HostName 192.168.178.93
  # 	ForwardAgent yes

  # Host 192.168.178.46
  # 	User tomas
  # 	HostName 192.168.178.46

  # Host tower
  # 	User root
  # 	HostName tower
  # 	IdentityFile ~/.ssh/id_ed25519_cache
  # 	ForwardAgent yes
  # 	RequestTTY yes

  # Host 100.124.8.52
  # 	User root
  # 	HostName 100.124.8.52

  # Host 172.30.1.2
  # 	User root
  # 	HostName 172.30.1.2

  # Host 192.168.0.100
  # 	User root
  # 	HostName 192.168.0.100

  # Host 192.168.1.1
  # 	User root
  # 	HostName 192.168.1.1
  # 	HostKeyAlgorithms +ssh-rsa

  # Host 172.30.1.8
  # 	User root
  # 	HostName 172.30.1.8
  # 	HostKeyAlgorithms +ssh-rsa

  # Host nix-docker
  # 	User root
  # 	HostName 127.0.0.1
  # 	Port 3022

  # # IdentityFile /Users/tomas/.ssh/id_ed25519
  # Host eu.nixbuild.net
  # 	PubkeyAcceptedKeyTypes ssh-ed25519
  # 	ServerAliveInterval 60
  # 	IPQoS throughput

  # # IdentityFile /Users/tomas/.ssh/id_ed25519
  # Host *
  # 	IdentityAgent "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
  # 	SendEnv LANG LC_*

  # Host tower.ling-lizard.ts.net
  # 	User root
  # 	HostName tower.ling-lizard.ts.net
  # 	ForwardAgent yes

  # Host nix-docker
  # 	User root
  # 	HostName 127.0.0.1
  # 	Port 3022

  # # IdentityFile /Users/tomas/.ssh/id_ed25519
  # Host eu.nixbuild.net
  # 	PubkeyAcceptedKeyTypes ssh-ed25519
  # 	ServerAliveInterval 60
  # 	IPQoS throughput

  # # IdentityFile /Users/tomas/.ssh/id_ed25519
  # Host enceladus
  # 	User tomas
  # 	HostName enceladus
  # 	RequestTTY yes
  # 	ForwardAgent yes

  # # RemoteCommand = "tmux -CC new -A -s main
  # Host unraidferdorie
  # 	User tomas
  # 	HostName unraidferdorie
  # 	RequestTTY yes
  # 	ForwardAgent yes

  # # Parsed from command line:
  # # ssh nix-ssh@192.168.0.100
  # Host nix-ssh
  # 	User nix-ssh
  # 	HostName 192.168.0.100
  # 	IdentityFile ~/.ssh/id_ed25519_cache.pub

  programs.ssh = {

    enable = true;
    forwardAgent = true;

    # identityAgent = "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock";
    # extraConfig =
    #   "IdentityAgent \"~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\""
    # ;

    matchBlocks = {
      "*" = {
        extraOptions = lib.mkIf stdenv.isDarwin {
          "IdentityAgent" = "/Users/tomas/.1password/agent.sock";
        };
      };
      enceladus = {
        hostname = "enceladus";
        user = "tomas";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      raspbii = {
        hostname = "raspbii";
        user = "tomas";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      supermicro = {
        hostname = "supermicro";
        user = "tomas";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      cfserve = {
        hostname = "cfserve";
        user = "tomas";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      tower = {
        hostname = "tower";
        user = "root";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      hyperv-nixos = {
        hostname = "hyperv-nixos";
        user = "tomas";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";
        };
      };
      winrtx = {
        hostname = "192.168.1.46";
        user = "root";
        forwardAgent = true;
        extraOptions = {
          RequestTTY = "yes";
          RemoteCommand = "tmux new -A -s foobar";
          # RemoteCommand = "${tmux-menu} || tmux";

          "HostKeyAlgorithms" = "+ssh-rsa";
          "PubkeyAcceptedAlgorithms" = "+ssh-rsa";
        };
      };
    };
  };

  # age.secrets.gh = {
  #   file = ./secrets/gh.age;
  #   path =
  #     if stdenv.isLinux
  #     then "/home/tomas/.config/gh/hosts.yml"
  #     else "/Users/tomas/.config/gh/hosts.yml";
  # };

  # home.file = {
  #   # # Building this configuration will create a copy of 'dotfiles/screenrc' in
  #   # # the Nix store. Activating the configuration will then make '~/.screenrc' a
  #   # # symlink to the Nix store copy.
  #   # ".screenrc".source = dotfiles/screenrc;

  #   # # You can also set the file content immediately.
  #   ".zshrc".text = ''
  #       export EDITOR='subl -w'
  #     #   # autoload -Uz compinit
  #     #   # compinit

  #     #   # source ~/.zsh/plugins/iterm2_shell_integration
  #     #   # . ~/.zsh/plugins/iterm2_tmux_integration

  #       export PS1="%{$(iterm2_prompt_mark)%} $PS1";
  #   '';
  # };

  programs.git.enable = true;
  programs.git.userName = "Tomas Harkema";
  programs.git.userEmail = "tomas@harkema.io";

  programs.home-manager = { enable = true; };
  programs.lazygit.enable = true;
  programs.lsd.enable = true;
  programs.jq.enable = true;
  programs.skim.enable = true;
  fonts.fontconfig.enable = true;

  age.secrets.attic-key = {
    file = ./secrets/attic-key.age;
    mode = "770";
    # owner = "tomas";
    # group = "tomas";
  };

  programs.zsh =
    {
      enable = true;
      enableAutosuggestions = true;
      syntaxHighlighting.enable = true;
      enableVteIntegration = true;
      enableSyntaxHighlighting = true;

      antidote = {
        enable = true;
        plugins = [
          "zsh-users/zsh-completions"
          "zsh-users/zsh-history-substring-search"
        ];
      };
      autocd = true;
      history.extended = true;
      history.expireDuplicatesFirst = true;
      historySubstringSearch = {
        enable = true;
        # searchUpKey = "^[OA";
        # searchDownKey = "^[OB";
      };

      # autosuggestions.strategy = [ "history" "completion" "match_prev_cmd" ];

      shellAliases = {
        ll = "ls -l";
        ls = "exa";
        la = "exa -a";
        grep = "grep --color=auto";
        cp = "cp -i";
        mv = "mv -i";
        rm = "rm -i";
        g = "git";
        gs = "git status";
        pvxz = "pv @1 -N in -B 500M | xz -e9 -T4 | pv -N out -B 500M > @2";
        # subl = (lib.mkIf stdenv.isDarwin) "/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl";
        # dev = ''
        #   nix develop --profile dev-profile -c true && \
        #     cachix push tomasharkema dev-profile && \
        #     exec nix develop --profile dev-profile
        # '';
        # updatehome = ''
        #   nix build ~/Developer/nix-config#homeConfigurations."tomas@$(hostname)".activationPackage --json \
        #     | jq -r '.[].outputs | to_entries[].value' \
        #     | cachix push tomasharkema
        # '';
        # upload-to-cache = ''
        #   set -eu; \
        #   set -f ; \
        #   export IFS=' ' ; \
        #   echo "Signing and uploading paths" $OUT_PATHS ; \
        #   exec nix copy --to 'http://tower.ling-lizard.ts.net:6666/' $OUT_PATHS'';

        # upload-after-build = ''
        #   jq -r '.[].outputs | to_entries[].value' | nix copy --to 'https://nix-cache.harke.ma' --stdin
        # '';
      };

      plugins = [
        {
          name = "iterm2_shell_integration";
          src = pkgs.fetchurl {
            url = "https://iterm2.com/shell_integration/zsh";
            sha256 = "1xk6kx5kdn5wbqgx2f63vnafhkynlxnlshxrapkwkd9zf2531bqa";
            # date = 2022-12-28T10:15:23-0800;
          };
        }
        {
          name = "iterm2_tmux_integration";
          src = pkgs.fetchurl {
            url =
              "https://gist.githubusercontent.com/antifuchs/c8eca4bcb9d09a7bbbcd/raw/3ebfecdad7eece7c537a3cd4fa0510f25d02611b/iterm2_zsh_init.zsh";
            sha256 = "1v1b6yz0lihxbbg26nvz85c1hngapiv7zmk4mdl5jp0fsj6c9s8c";
            # date = 2022-12-28T10:15:27-0800;
          };
        }
      ];

      oh-my-zsh = {
        enable = true;
        plugins = [
          "1password"
          "autojump"
          "aws"
          "colorize"
          "docker"
          "encode64"
          "fzf"
          "git-extras"
          "git"
          "git"
          "gitignore"
          "macos"
          "man"
          "mix"
          "nmap"
          "sudo"
          "sudo"
          "systemd"
          "thefuck"
          "tig"
          "tmux"
          "vi-mode"
          "yarn"
          "zsh-navigation-tools"
        ];
        theme = "robbyrussell";
      };
    };
}
